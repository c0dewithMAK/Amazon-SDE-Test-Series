// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

struct petrolPump
{
    int petrol;
    int distance;
};


 // } Driver Code Ends
/*
The structure of petrolPump is 
struct petrolPump
{
    int petrol;
    int distance;
};*/

/*You are required to complete this method*/
class Solution{
  public:
  
    //Function to find starting point where the truck can start to get through
    //the complete circle without exhausting its petrol in between.
    int tour(petrolPump p[],int n)
    {
        // calc = to cumulatively calculate the excessive petrol left after travelling a path
        // start = denotes the approprite position for starting
        // def = calculates cumulative deficiency of petrol
        int calc = 0 , start = 0, deficit = 0;
        
        for(int i = 0; i<n; ++i){
            // keep adding till where car can go
            calc += p[i].petrol - p[i].distance;
            
            if(calc < 0){
                // if we can't reach it, change the starting position
                start = i+1;
                // keep adding the cumulative deficiency of petrol
                // this will come in handy when calculating final petrol sum
                deficit += calc;
                calc = 0;
            }
        }
        // final total petrol needed is (calc+def)
        return (calc+deficit)>0?start:-1;
    }
};



// { Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        petrolPump p[n];
        for(int i=0;i<n;i++)
            cin>>p[i].petrol>>p[i].distance;
        Solution obj;
        cout<<obj.tour(p,n)<<endl;
    }
}
  // } Driver Code Ends
