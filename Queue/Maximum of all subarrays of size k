// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends


class Solution
{
    public:
    
    // First Approach : (BETTER APPROACH)
    vector<int> usingDequeue(int * arr, int n, int k){
        // This takes lesser time comparatively to Priority Queue or MultiSet implementations
        // We store indexes in dequeue here because elements can be repeated at different
        // indexes
        
        // Result vector
        vector<int> ans;
        
        // A dequeue that stores index of elements such that 
        // dq.front() contains index of max element in current window
        // dq.back() contains index of min element in current window
        deque<int> dq;
        int i = 0;
        for( ; i<k; ++i){
            
            // Keep popping the elements while elements at indexes from back of queue
            // are smaller than incoming new element
            while(!dq.empty() && arr[dq.back()] < arr[i]){
                dq.pop_back();
            }
            
            // Push the element's index at the proper place now
            dq.push_back(i);;
        }
        // After above the first window's min and max element's indexes are stored in dequeue
        
        ans.push_back(arr[dq.front()]);
        
        while( i < n ){
            
            // Remove the index from dequeue if it is out of the current window
            while( !dq.empty() && dq.front() <= (i-k) )
                dq.pop_front();
            
            // Also remove the elements from indexes at the back of dequeue if they are smaller
            // than the incoming element
            while( !dq.empty() && arr[i] > arr[dq.back()] )
                dq.pop_back();
                
            dq.push_back(i);
            // Push front as it has current window's maximum element's index
            ans.push_back(arr[dq.front()]);
            ++i;
        }
        
        return ans;
    }
    
    // Second Approach :
    vector<int> usingMultiSet(int *arr, int n, int k){
        // NOTE: Using multiset takes comparatively more time as it's internal operations
        // are time-consuming
        
        
        // Create a multiset and pass in greater<int> to store elements in descending fashion
        multiset<int, greater<int>> st;
        for(int i = 0; i < k; i++) {
            st.insert(arr[i]);
        }
        
        vector<int> ans;
        // Currently for the first k-length window, *st.begin() is the max element
        ans.push_back(*st.begin());
        
        for(int i = 1; i <= n-k; i++) {
            // Remove the element from multiset which is out of the window
            st.erase(st.find(arr[i-1]));
            // Insert the new incoming window
            st.insert(arr[k+i-1]);
            ans.push_back(*st.begin());
        }
        return ans;
    }
    
    //Function to find maximum of each subarray of size k.
    vector <int> max_of_subarrays(int *arr, int n, int k)
    {
        // First Approach : (Better one)
        return usingDequeue(arr, n, k);
        // Second Approach :
        // return usingMultiSet(arr, n, k);
    }
};

// { Driver Code Starts.

int main() {
	
	int t;
	cin >> t;
	
	while(t--){
	    
	    int n, k;
	    cin >> n >> k;
	    
	    int arr[n];
	    for(int i = 0;i<n;i++) 
	        cin >> arr[i];
	    Solution ob;
	    vector <int> res = ob.max_of_subarrays(arr, n, k);
	    for (int i = 0; i < res.size (); i++) 
	        cout << res[i] << " ";
	    cout << endl;
	    
	}
	
	return 0;
}  // } Driver Code Ends
