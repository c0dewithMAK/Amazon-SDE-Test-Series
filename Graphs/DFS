// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends


class Solution 
{
    public:
    
    void iter_dfsOfGraphUtil(int x, vector<bool>& visited, 
                                vector<int> adj[], vector<int>& dfsRes){
        
        stack<int> s;
	    // Initially push first node into stack and mark it as visited;
	    s.push(x);
	    
	    while(!s.empty()){
	        x = s.top();
	        s.pop();
	        
	        if(visited[x])
	            continue;
	            
	        visited[x] = true;
	        dfsRes.push_back(x);
	       
	        // Since in output we want left to right fashion, we traverse adj list in 
	        // right to left manner
	        for(auto i = adj[x].rbegin(); i != adj[x].rend(); ++i){
	            if(!visited[*i]){
	                s.push(*i);
	            }
	        }
	    }
    }
    
    // Recursive solution
    void recur_dfsOfGraphUtil(int x, vector<bool>& visited, vector<int> adj[], vector<int>& dfsRes){
        
        visited[x] = true;
        dfsRes.push_back(x);
        for(int i = 0; i<adj[x].size(); ++i){
            if(!visited[adj[x][i]]){
                // Implicit function stack being used here
                recur_dfsOfGraphUtil(adj[x][i], visited, adj, dfsRes);
            }
        }
    }
    
	//Function to return a list containing the DFS traversal of the graph.
	vector<int>dfsOfGraph(int V, vector<int> adj[])
	{
	    
	    vector<int> dfsRes;
	    vector<bool> visited(V, false);
	    
	    // Recusrsive Solution
	    recur_dfsOfGraphUtil(0, visited, adj, dfsRes);
	            
	   // Iterative Solution         
	   iter_dfsOfGraphUtil(0, visited, adj, dfsRes);
	    
	    return dfsRes;
	}
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int V, E;
    	cin >> V >> E;

    	vector<int> adj[V];

    	for(int i = 0; i < E; i++)
    	{
    		int u, v;
    		cin >> u >> v;
    		adj[u].push_back(v);
    		adj[v].push_back(u);
    	}
        // string s1;
        // cin>>s1;
        Solution obj;
        vector<int>ans=obj.dfsOfGraph(V, adj);
        for(int i=0;i<ans.size();i++){
        	cout<<ans[i]<<" ";
        }
        cout<<endl;
	}
	return 0;
}  // } Driver Code Ends
