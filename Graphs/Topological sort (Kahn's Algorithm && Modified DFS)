// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends



class Solution
{
	public:
	
	// Method 1: Using Kahn's Algorithm of indegree method
	// Better method than method 2 as it checks for cycle presence as well in O(V+E)
	void usingKahnAlgo(int V, vector<int> adj[], vector<int>& res){
	    vector<int> indeg(V, 0);

	    // Create the in-degree vector from adjacency list given
	    for( int i = 0; i < V; ++i ){
	        
	        for(int j : adj[i]){
	            ++indeg[j];
	        }
	    }
	    // Create a count variable that keeps track of the vertices explored/visited
	    int count = 0;
	    // Create a queue that stores only those verticed who has indegree 0
	    queue<int> zeroIndegNodes;
	    for(int i = 0; i<V; ++i){
	        if(indeg[i] == 0){
	            zeroIndegNodes.push(i);
	        }
	    }
 
	    while(!zeroIndegNodes.empty()){
	        int key = zeroIndegNodes.front();

	        zeroIndegNodes.pop();
	        res.push_back(key);
	        
	        for(int i : adj[key]){
	            --indeg[i];
	            if(indeg[i] == 0)
	                // Keep re-building the queue as more nodes will get their indegrees
	                // reduced to 0
	                zeroIndegNodes.push(i);
	        }
	        
	        // Increment the count for a new incoming vertex with indegree 0
	        ++count;
	    }
	    
	    // The following lines of code tell us whether there is any cycle in the graph or not
	    // if(count != V){
	    //    cout << "THERE IS A CYCLE IN GRAPH" !;
	    // }
	    
	}
	
	// Method 2: Using Modified DFS 
	void dfsUtilTopOrder(int u, vector<int> adj[], vector<bool>& visited, stack<int>& s){
	    
	    visited[u] = true;
	    for(int v : adj[u]){
	        if(!visited[v]){
	            dfsUtilTopOrder(v, adj, visited, s);
	        }
	    }
	    s.push(u);
	}
	// Note: This method blindly assumes that the graph is DAG and doesn't checks for cyclicity
	void usingModifiedDFS(int V, vector<int> adj[], vector<int>& res){
	    
	    vector<bool> visited(V, false);
	    stack<int> revOrder;
	    for(int i = 0; i<V; ++i){
	        if(!visited[i]){
	            dfsUtilTopOrder(i, adj, visited, revOrder);
	        }
	    }
	    
	    // Let's construct our result vector now
	    while(!revOrder.empty()){
	        res.push_back(revOrder.top());
	        revOrder.pop();
	    }
	}
	
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    vector<int> res; // Our result vector containing the topological ordering of nodes
	    // Using Kahn's Algorithm (A better method actually)
	    // usingKahnAlgo(V, adj, res);
	    
	    // Method 2: Using Modified DFS - Time : O(V+E)
	    usingModifiedDFS(V, adj, res);

	    return res;
	}
};

// { Driver Code Starts.

/*  Function to check if elements returned by user
*   contains the elements in topological sorted form
*   V: number of vertices
*   *res: array containing elements in topological sorted form
*   adj[]: graph input
*/
int check(int V, vector <int> &res, vector<int> adj[]) {
    vector<int> map(V, -1);
    for (int i = 0; i < V; i++) {
        map[res[i]] = i;
    }
    for (int i = 0; i < V; i++) {
        for (int v : adj[i]) {
            if (map[i] > map[v]) return 0;
        }
    }
    return 1;
}

int main() {
    int T;
    cin >> T;
    while (T--) {
        int N, E;
        cin >> E >> N;
        int u, v;

        vector<int> adj[N];

        for (int i = 0; i < E; i++) {
            cin >> u >> v;
            adj[u].push_back(v);
        }
        
        Solution obj;
        vector <int> res = obj.topoSort(N, adj);

        cout << check(N, res, adj) << endl;
    }
    
    return 0;
}  // } Driver Code Ends
