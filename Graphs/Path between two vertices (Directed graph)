#include <iostream>
#include <vector>
#include <list>
#include <iterator>
using namespace std;

void dfsUtil(int u, int d, vector<int> adj[], vector<bool>& visited, list<int>& resPath){
    
    if( u == d ){
        visited[u] = true;
        resPath.push_back(d);
        return;
    }
    
    visited[u] = true;
    resPath.push_back(u);
    
    for(int v : adj[u]){
        if(u == v){
            // Ignore the self-loops
            continue;
        }
        if(!visited[v] && !visited[d]){
            dfsUtil(v, d, adj, visited, resPath);
        }
    }
    
    if(!visited[d]){
        resPath.pop_back();
    }
}

// Function that prints 'yes' if the path exists between 2 nodes and also the respective path as well
// Else prints 'no'
void doesPathExist(int V, vector<int> adj[], int s, int d){
    
    vector<bool> visited(V, false);
    list<int> resPath;
    // Perform DFS traversal
    dfsUtil(s, d, adj, visited, resPath);
    if(resPath.size() > 0){
        list<int>::iterator itr;
        cout << "Path from " << s << " to " << d << " exists and is -> ";
        for(itr = resPath.begin(); itr != resPath.end(); ++itr)
            cout << *itr << " ";
    }
    else{
        cout << "No path exists between " << s << " to " << d;
    }
}

int main() {
	
	cout << "Graph 1 : \n";
	int V1 = 4;
	vector<int> adj1[4];
	adj1[0].push_back(1);
	adj1[0].push_back(2);
	adj1[1].push_back(2);
	adj1[2].push_back(0);
	adj1[2].push_back(3);
	adj1[3].push_back(3);
	doesPathExist(V1, adj1, 1, 3);
	
	cout << "\nGraph 2 :\n";
	int V2 = 5;
	vector<int> adj2[5];
	adj2[1].push_back(0);
	adj2[0].push_back(2);
	adj2[2].push_back(1);
	adj2[2].push_back(3);
	adj2[3].push_back(4);
	adj2[0].push_back(4);
	doesPathExist(V2, adj2, 1, 3);
	
	
	cout << "\nGraph 3 :\n";
	int V3 = 7;
	vector<int> adj3[7];
	adj3[0].push_back(1);
	adj3[1].push_back(2);
	adj3[2].push_back(0);
	adj3[3].push_back(1);
	adj3[1].push_back(4);
	adj3[6].push_back(1);
	adj3[3].push_back(5);
	adj3[4].push_back(5);
	doesPathExist(V3, adj3, 0, 6);
	
	return 0;
}
