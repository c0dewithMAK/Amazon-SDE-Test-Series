// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
public:
    
    int bellmanFord(int V, vector<vector<int>>& edges)
    {
        // Here we don't need to create adjacency list as algorithm runs for all edges 
        vector<int> dist(V, INT_MAX);
	    dist[0] = 0;
	    
        for(int i = 0; i<V-1; ++i){
            // Iterate below loop for |V|-1 times and relax all the edges if needed
            for(int j = 0; j < edges.size(); ++j){
                int u = edges[j][0];
                int v = edges[j][1];
                int c = edges[j][2];
                if(dist[u]!=INT_MAX && (dist[u] + c) < dist[v] ){
                    // Relaxing the edges
                    dist[v] = dist[u] + c;
                }
            }
        }
        
        // Now try to relax all the edges one more time and see if we get a shorter distance d[i]
        // value for any vertex
        for(int j = 0; j < edges.size(); ++j){
                int u = edges[j][0];
                int v = edges[j][1];
                int c = edges[j][2];
                if(dist[u]!=INT_MAX && (dist[u] + c) < dist[v] ){
                    // Yes, shorter distance found, this means there is a negative weight cycle
                    return 1;
                }
        }
        
        return 0;
        
    }

	int isNegativeWeightCycle(int n, vector<vector<int>>edges){
	    
	    // We apply the Bellman-Ford Algorithm here to find if at the (n)th iteration
	    // any dist[i] value changes or not. If yes, then there is a negative weight cycle
	    // else not.
	    
	    return bellmanFord(n, edges);
	   
	}
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<int>>edges;
		for(int i = 0; i < m; i++){
			int x, y, z;
			cin >> x >> y >> z;
			edges.push_back({x,y,z});
		}
		Solution obj;
		int ans = obj.isNegativeWeightCycle(n, edges);
		cout << ans <<"\n";
	}
	return 0;
}  // } Driver Code Ends
