// { Driver Code Starts
//Initial template for C++

#include <bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};
void printList(Node* node) 
{ 
    while (node != NULL) { 
        cout << node->data <<" "; 
        node = node->next; 
    }  
    cout<<"\n";
} 


 // } Driver Code Ends
//User function template for C++

/*
struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};
*/
class Solution{
public:
    bool isEven(Node *curr){
       return (curr->data % 2 == 0) ? true : false;
    }
    
    Node* divide(int N, Node *head){
        if( !head )
            return head;
            
        Node* curr = head, *headOfOdd = NULL, *tailOfOdd = NULL, 
        *headOfEven = NULL, *tailOfEven = NULL;
       
        while(curr != NULL){
            if(isEven(curr)){
                if(headOfEven == NULL)
                    headOfEven = tailOfEven = curr;
                else{
                   tailOfEven->next = curr;
                   tailOfEven = curr;
                }
            }
            else{
                if(headOfOdd == NULL)
                    headOfOdd = tailOfOdd = curr;
                else{
                    tailOfOdd->next = curr;
                    tailOfOdd = curr;
                }
            }
            curr = curr->next;
        }
       
       //Taking care of nullPointer Exception
       if(tailOfOdd != NULL)
           tailOfOdd->next = NULL;
       if(tailOfEven != NULL)
           tailOfEven->next = (headOfOdd != NULL) ? headOfOdd : NULL;
       return (headOfEven != NULL) ? headOfEven : head;
       
        
    }
};

// { Driver Code Starts.

int main() {
    //code
    int t;
    cin>>t;
    while(t--){
        int N;
        cin>>N;
        int data;
        cin>>data;
        struct Node *head = new Node(data);
        struct Node *tail = head;
        for (int i = 0; i < N-1; ++i)
        {
            cin>>data;
            tail->next = new Node(data);
            tail = tail->next;
        }
        
        Solution ob;
        Node *ans = ob.divide(N, head);
        printList(ans); 
    }
    return 0;
}
  // } Driver Code Ends
