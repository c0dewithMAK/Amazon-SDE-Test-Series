// { Driver Code Starts
//

#include <bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    Node *next;
    Node(int val)
    {
        data=val;
        next=NULL;
    }
};

Node* inputList(int size)
{
    Node *head, *tail;
    int val;
    
    cin>>val;
    head = tail = new Node(val);
    
    while(--size)
    {
        cin>>val;
        tail->next = new Node(val);
        tail = tail->next;
    }
    
    return head;
}

void printList(Node* n)
{
    while(n)
    {
        cout<< n->data << " ";
        n = n->next;
    }
}

Node* findIntersection(Node* head1, Node* head2);

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	    int n,m;
	    cin>> n >> m;
	    
	    Node* head1 = inputList(n);
	    Node* head2 = inputList(m);
	    
	    Node* result = findIntersection(head1, head2);
	    
	    printList(result);
	    cout<< endl;
	}
	return 0;
}
// } Driver Code Ends


/* The structure of the Linked list Node is as follows:

struct Node
{
    int data;
    Node *next;
    Node(int val)
    {
        data=val;
        next=NULL;
    }
};

*/

Node* findIntersection(Node* head1, Node* head2)
{
    if(!head1 || !head2){
        return NULL;
    }
    
    int len1 = 0, len2 = 0;
    
    // A map to store all nodes of the smaller list
    // It stores the data values of the smaller list and it's repetition
    map<int, int> m;
    //First we need to find the lengths of both LLs
    Node *curr = head1;
    while(curr){
        ++len1;
        curr = curr->next;
    }
    
    curr = head2;
    while(curr){
        ++len2;
        curr = curr->next;
    }
    
    // head node for out intersection list
    Node *head3 = NULL;
    
    if(len1 <= len2){
        curr = head1;
        
        while(curr){
            // Create the map
            if(m.find(curr->data) == m.end())
                m.insert({curr->data, 1});
            curr = curr->next;
        }
        
        curr = head2;
        Node *curr_res = head3;
        while(curr){
            if(m.find(curr->data) != m.end() && m[curr->data] == 1){
                // Only enter for non-repeated data values
                ++m[curr->data]; // Increment it, denoting that this number is already
                                 // present in the final intersection list now
                if(!head3){
                    curr_res = new Node(curr->data);
                    head3 = curr_res;
                }
                else{
                    Node *temp = new Node(curr->data);
                    curr_res->next = temp;
                    curr_res = curr_res->next;
                }
            }
            curr = curr->next;
        }
    }
    else{
        curr = head2;
        
        while(curr){
            if(m.find(curr->data) == m.end())
                m.insert({curr->data, 1});
            curr = curr->next;
        }
        
        curr = head1;
        Node *curr_res = head3;
        while(curr){
            if(m.find(curr->data) != m.end() && m[curr->data] == 1){
                // Only enter for non-repeated data values
                ++m[curr->data]; // Increment it, denoting that this number is already
                                 // present in the final intersection list now
                if(!head3){
                    curr_res = new Node(curr->data);
                    head3 = curr_res;
                }
                else{
                    Node *temp = new Node(curr->data);
                    curr_res->next = temp;
                    curr_res = curr_res->next;
                }
            }
            curr = curr->next;
        }
    }
    
    // Finally return the head pointer for final intersection list
    return head3;
}
