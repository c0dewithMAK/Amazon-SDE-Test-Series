// { Driver Code Starts
//Initial template for C++

#include <bits/stdc++.h> 
using namespace std; 

struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};

void printList(Node* node) 
{ 
    while (node != NULL) { 
        cout << node->data; 
        node = node->next; 
    }  
    cout<<"\n";
} 


 // } Driver Code Ends
//User function template for C++

/* 

struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};

*/

class Solution
{
    public:
    Node* reverseLL(Node *head){
        
        if(!head || !head->next)
            return head;
            
        // Pointer which traverses the list    
        Node *curr = head;
        // Pointers which helps to rotate link between 2 nodes
        Node *temp1 = head;
        Node *temp2 = head;
        int i = 0;
        while(curr && temp1){
            if(i == 0){
                // This means it's the head of the LL right now
                temp1 = curr->next;
                curr->next = NULL;
                head = temp1; // Move the head forwards
                ++i;
            }
            else{
                temp2 = temp1->next;
                if(!temp2){
                    temp1->next = curr;
                    head = temp1;
                    break;
                }
                temp1->next = curr;
                curr = head = temp1;
                temp1 = temp2;
            }
        }
        return head;
    }
    
    Node* addOne(Node *head) 
    {
        if(!head){
            return head;
        }
        
        // First reverse the LL once and add 1 to head node
        head = reverseLL(head);
        
        Node *curr = head;
        Node *prev = NULL;
        bool flag = true;
        while(curr){
            if(curr->data!=9){
                curr->data += 1;
                flag = false;
                break;
            }
            else{
                curr->data = 0;
                prev = curr;
                curr = curr->next;
            }
        }
        
        if(flag){
            // Means number was of type 9, 99, 999 etc
            Node *temp = new Node(1);
            prev->next = temp;
        }
        
        // Reverse again to get original list back
        head = reverseLL(head);
        
        // return head of list after adding one
        return head;
    }
};

// { Driver Code Starts.

int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        string s;
        cin>>s;
        
        Node* head = new Node( s[0]-'0' );
        Node* tail = head;
        for(int i=1; i<s.size(); i++)
        {
            tail->next = new Node( s[i]-'0' );
            tail = tail->next;
        }
        Solution ob;
        head = ob.addOne(head);
        printList(head); 
    }
    return 0; 
} 
  // } Driver Code Ends
