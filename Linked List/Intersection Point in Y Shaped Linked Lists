// { Driver Code Starts
#include<iostream>
#include<stdio.h>
#include<bits/stdc++.h>
using namespace std;

/* Link list Node */
struct Node
{
    int data;
    struct Node *next;
    Node(int x)
    {
        data = x;
        next = NULL;
    }
};

int intersectPoint(struct Node* head1, struct Node* head2);

Node* inputList(int size)
{
    if(size==0) return NULL;
    
    int val;
    cin>> val;
    
    Node *head = new Node(val);
    Node *tail = head;
    
    for(int i=0; i<size-1; i++)
    {
        cin>>val;
        tail->next = new Node(val);
        tail = tail->next;
    }
    
    return head;
}

/* Driver program to test above function*/
int main()
{
    int T,n1,n2,n3;

    cin>>T;
    while(T--)
    {
        cin>>n1>>n2>>n3;
        
        Node* head1 = inputList(n1);
        Node* head2 = inputList(n2);
        Node* common = inputList(n3);
        
        Node* temp = head1;
        while(temp!=NULL && temp->next != NULL)
            temp = temp->next;
        if(temp!=NULL) temp->next = common;
        
        temp = head2;
        while(temp!=NULL && temp->next != NULL)
            temp = temp->next;
        if(temp!=NULL) temp->next = common;
        
        cout << intersectPoint(head1, head2) << endl;
    }
    return 0;
}

// } Driver Code Ends


/* Linked List Node
struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
}; */

//Function to find intersection point in Y shaped Linked Lists.
int intersectPoint(Node* head1, Node* head2)
{
    // Base case, one of the list should also have atleast 2 nodes
    if(!head1 || !head1->next || !head2 || !head2->next){
        return -1;
    }
    
    // Find the length of both lists first
    int len1 = 0, len2 = 0;
    Node* curr = head1;
    while(curr){
        ++len1;
        curr = curr->next;
    }
    
    curr = head2;
    
    while(curr){
        ++len2;
        curr = curr->next;
    }
    
    Node *curr1 = head1;
    Node *curr2 = head2;
    
    // Whichever list is lengthier firstly traverse it forward upto the point that
    // distance of curr1 and curr2 to the intersection node are same
    if(len1 > len2){
        int count = len1 - len2;
        while(count--){
            curr1 = curr1->next;
        }
    }
    else if(len1 < len2){
        int count = len2 - len1;
        while(count--){
            curr2 = curr2->next;
        }
    }
    
    // At this point of time both curr1 and curr2 at same distance from the intersection
    // common node
    
    while(curr1->next && curr2->next){
        // Now traverse both at the same time and get the intersection data, if found
        if(curr1->next == curr2->next){
            return curr1->next->data;
        }
        
        curr1 = curr1->next;
        curr2 = curr2->next;
    }
    
    // Both lists do not intersect at all
    return -1;
}

