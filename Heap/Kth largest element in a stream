// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
  public:
    vector<int> kthLargest(int k, int arr[], int n) {
        // Key here is to create a min-heap for the K-largest elements only
        priority_queue<int, vector<int>, greater<int>> pq;
        vector<int> res;
        int i = 0;
        
        while( i < n ){
            
            if( (i+1) < k ){
                pq.push(arr[i]);
                // No Kth largest element for this window
                res.push_back(-1);
            }
            else if( (i+1) == k ){
                pq.push(arr[i]);
                res.push_back(pq.top());
            }
            else if( (i+1) > k  && arr[i] >= pq.top() ){
                // We pop-out the current minimum element at the top of queue 
                pq.pop();
                // Add new greater element so it queue gets heapified and arr[i] settles down
                pq.push(arr[i]);
                // Then we add minimum element accordingly to res vector
                res.push_back(pq.top());
            }
            else{
                // Since incoming number to the stream is lesser than minimum of our heap
                // we don't care to do anything because we only have to maintain the min-heap
                // for largest k elements only.
                res.push_back(pq.top());
            }
            
            ++i;
        }
        
        return res;
    }
};

// { Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int k,n;
        cin>>k>>n;
        int arr[n];
        for(int i=0; i<n; i++)
            cin>>arr[i];

        Solution ob;
        vector<int> v = ob.kthLargest(k,arr,n);
        for(int i : v)
            cout<<i<<" ";
        cout<<endl;
    }
    return 0;
}  // } Driver Code Ends
