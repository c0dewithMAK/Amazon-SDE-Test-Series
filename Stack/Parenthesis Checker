// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;


 // } Driver Code Ends



class Solution
{
    public:
    //Function to check if brackets are balanced or not.
    bool ispar(string x)
    {
        if(x.empty())
            return true;
            
        int len = x.length();
        // If string itself is of odd length, it can never be balanced
        if(len%2 != 0)
            return false;
            
        stack<char> s;
        int i = 0;
        while(i < len){
            
            // Extract the incoming character first
            char ch = x[i++];
            
            // Blindly push if it is an opening bracket of any type
            if(ch == '(' || ch == '[' || ch == '{')
                s.push(ch);
                
            //Now pop from the stack based on below conditions
            else if(!s.empty()){
                if(ch == ')' && s.top() != '(')
                    return false;
                if(ch == '}' && s.top() != '{')
                    return false;
                if(ch == ']' && s.top() != '[')
                    return false;
                s.pop();
            }
        }
        
        // If we reach here, all parenthesis were balanced and in proper order
        return true;
    }

};

// { Driver Code Starts.

int main()
{
   int t;
   string a;
   cin>>t;
   while(t--)
   {
       cin>>a;
       Solution obj;
       if(obj.ispar(a))
        cout<<"balanced"<<endl;
       else
        cout<<"not balanced"<<endl;
   }
}  // } Driver Code Ends
