// { Driver Code Starts
//Initial template for C++
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
//User function template in C++

class Solution
{
    int R;
    int C;
    public:
    int dfsMemo(int r, int c, auto& mat){
        if( r > R || c > C )
            return 0;
        if( r == R-1 && c == C-1 )
            return 1;
            
        int right = 0;
        int down = 0;
        if( r + 1 < R ){
            if( mat[r+1][c] != 0 )
                right += mat[r+1][c];
            else
                right += dfsMemo(r+1, c, mat);
        }
        if( c + 1 < C ){
            if( mat[r][c+1] != 0 )
                down += mat[r+1][c];
            else
                down += dfsMemo(r, c+1, mat);
        }
        mat[r][c] = right + down;
        return mat[r][c];
    }
    //Function to find total number of unique paths.
    int NumberOfPath(int a, int b)
    {
        R = a;
        C = b;
        vector<vector<int>> matrix(a, vector<int>(b, 0));
        return dfsMemo(0, 0, matrix);
    }
};


// { Driver Code Starts.
int main()
{
    //taking total testcases
    int t;
    cin>>t;
    while(t--)
    {
        //taking dimensions of the matrix
        int a,b;
        cin>>a>>b;
        Solution ob;
        //calling NumberOfPath() function
        cout << ob.NumberOfPath(a,b) << endl;
    }
}

  // } Driver Code Ends
