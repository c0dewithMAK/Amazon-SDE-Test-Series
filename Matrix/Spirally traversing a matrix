// { Driver Code Starts
#include <bits/stdc++.h> 
using namespace std; 

 // } Driver Code Ends

class Solution
{   
    public: 
    //Function to return a list of integers denoting spiral traversal of matrix.
    vector<int> spirallyTraverse(vector<vector<int> > matrix, int r, int c) 
    {
        vector<int> res;
        if( r == 1){
            for(int i = 0; i<c; ++i)
                res.push_back(matrix[0][i]);
            return res;
        }
        if(c == 1){
            for(int i = 0; i<r; ++i)
                res.push_back(matrix[i][0]);
            return res;
        }
        
        // Initialize these boundary markers
        int low_r = 0, high_r = r-1, low_c = 0, high_c= c-1;
        //int i = low_r, j = low_c;
        while(low_r <= high_r && low_c <= high_c){
            
            // First traverse left to right in the low_r row
            int i = low_r;
            int j = low_c;
            while(j <= high_c){
                res.push_back(matrix[i][j++]);
            }
            
            // Then modify the markers
            j = high_c;
            ++low_r;
            if(low_r > high_r)
                // This condition is imposed here for cases where there are odd number of rows
                // and because of traversing for low_r = high_r, low_r becomes > high_r 
                // afterwards.
                break;
                
            // Now traverse top to bottom in the high_c column    
            i = low_r;
            while(i <= high_r){
                res.push_back(matrix[i++][j]);
            }
            --high_c;
            if(high_c < low_c)
                // This condition is imposed here for cases where there are odd number of columns
                // and because of traversing for low_c = high_c, low_c becomes > high_c 
                // afterwards.
                break;
                
            // Now traverse right to left in the high_r row
            i = high_r;
            j = high_c;
            while(j >= low_c){
                res.push_back(matrix[i][j--]);
            }
            --high_r;
            
            // Now finally traverse bottom to top in the low_c column to complete a spiral
            // loop
            j = low_c;
            i = high_r;
            while(i >= low_r){
                res.push_back(matrix[i--][j]);
            }
            ++low_c;
            
            // Loop is again run now for innner sub-matrices
        }
        return res;
    }
};

// { Driver Code Starts.
int main() {
    int t;
    cin>>t;
    
    while(t--) 
    {
        int r,c;
        cin>>r>>c;
        vector<vector<int> > matrix(r); 

        for(int i=0; i<r; i++)
        {
            matrix[i].assign(c, 0);
            for( int j=0; j<c; j++)
            {
                cin>>matrix[i][j];
            }
        }

        Solution ob;
        vector<int> result = ob.spirallyTraverse(matrix, r, c);
        for (int i = 0; i < result.size(); ++i)
                cout<<result[i]<<" ";
        cout<<endl;
    }
    return 0;
}  // } Driver Code Ends
