// { Driver Code Starts
// kth largest element in a 2d array sorted row-wise and column-wise
#include<bits/stdc++.h>
using namespace std;
#define MAX 1000
int mat[MAX][MAX];
int kthSmallest(int mat[MAX][MAX], int n, int k);
// driver program to test above function
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
    
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                cin>>mat[i][j];
        int r;
        cin>>r;
        cout<<kthSmallest(mat,n,r)<<endl;
    }
     // cout << "7th smallest element is " << kthSmallest(mat, 4, 7);
      return 0;
}
// } Driver Code Ends



#define pp pair<int, pair<int, int>>

class MyComparator{
public:
    bool operator() (pp& x, pp& y){
        return x.first > y.first;
    }
};


int kthSmallest(int mat[MAX][MAX], int n, int k)
{
    priority_queue<pp, vector<pp>, MyComparator> pq;
    for(int i = 0; i < n; ++i)
        pq.push( {mat[i][0], {i, 0}} );
        
    while( !pq.empty() ){
        pp topVal = pq.top();
        pq.pop();
        --k;
        if( k == 0 )
            return topVal.first;
        
        
        if( topVal.second.second + 1 < n ){
            pq.push( {mat[topVal.second.first][topVal.second.second + 1], 
                        {topVal.second.first, topVal.second.second + 1}} );
        }
        else
            pq.push({INT_MAX, {INT_MAX, INT_MAX}});
    }
}
