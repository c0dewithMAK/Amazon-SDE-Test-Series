// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
//User function template for C++

class Solution {
  public:
    int R;
    int C;
    int countPalindromePaths = 0;
    const int m=1000000007;
    unordered_map<string, long long>mp;
    bool isValid(int r, int c, vector<vector<bool>>& visited){
        if( r < 0 || r == R || c < 0 || c == C )
            return false;
        if( visited[r][c] )
            return false;
        return true;
    }
    
    bool isPalindrome(string& s){
        int low = 0;
        int high = s.size() - 1;
        
        while( low < high ){
            if( s[low++] != s[high--])
                return false;
        }
        return true;
    }
    
    void countPathsUtil(int r, int c, vector<vector<char>>& matrix, 
                            vector<vector<bool>>& visited, string path){
        
        visited[r][c] = true;
        path.push_back(matrix[r][c]);
        //cout << "( " << r << ", " << c << " ) -> ";
        if( r == R - 1 && c == C - 1 ){
            if( isPalindrome(path) )
                ++countPalindromePaths;
            visited[r][c] = false;
            return;
        }
        
        if( isValid(r, c + 1, visited) ){
            countPathsUtil(r, c + 1, matrix, visited, path);
        }
        
        if( isValid(r + 1, c, visited) ){
            countPathsUtil(r + 1, c, matrix, visited, path);
        }
        
        visited[r][c] = false;
    }
    
    int f(vector<vector<char>>& arr, int i, int j, int p, int q){
        if( i >= arr.size() || j >= arr[0].size() || p < 0 || q < 0 ) return 0;
        if( arr[i][j] != arr[p][q] ) return 0;

        if( (i == p && j == q) || abs(i - p) == 1 && (j - q) == 0 || 
                (i - p) == 0 && abs(j -q ) == 1 ) return 1;        
        if( i > p || j > q) return 0;//second pointer at left of first or above first
        
        string curr = to_string(i) + '&' + to_string(j) + '&' + to_string(p) + '&' + 
                                        to_string(q);
        if( mp.find(curr) != mp.end() ) return mp[curr];

        long long op1 = f(arr, i, j+1, p, q-1) % m;
        long long op2 = f(arr, i, j+1, p-1, q) % m;
        long long op3 = f(arr, i+1, j, p, q-1) % m;
        long long op4 = f(arr, i+1, j, p-1, q) % m;
        return mp[curr] = ( op1 + op2 + op3 + op4) % m;
    }
    
    int countPalindromicPaths(vector<vector<char>> matrix){
        R = matrix.size();
        C = matrix[0].size();
        
        // Method 1 : Backtracking (gives TLE)
        /*vector<vector<bool>> visited(R, vector<bool>(C, false));
        string path;
        countPathsUtil(0, 0, matrix, visited, path);
        return countPalindromePaths;*/
        
        // Method 2 : Using 2 pointers technique
        mp.clear();
        return f(matrix, 0, 0, R - 1, C - 1) % m;
    }
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<char>>matrix(n, vector<char>(m,'x'));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++)
				cin >> matrix[i][j];
		}
		Solution obj;
		int ans = obj.countPalindromicPaths(matrix);
		cout << ans <<"\n";
	}
	return 0;
}  // } Driver Code Ends
