// { Driver Code Starts
#include <bits/stdc++.h>

using namespace std;

 // } Driver Code Ends
//User function template for C++
class Solution{
public:	
    int search(int A[], int N){
	    
        if( N == 1 )
            return A[0];
	        
        int low = 0; 
        int high = N-1;
        while( low <= high ){
            int mid = (low + high)/2;
            // Success condition
            if( (A[mid] != A[mid-1] && A[mid] != A[mid+1]) || (low == high) )
                return A[mid];
            
            // We need to basically see if number of elements to left of mid are even, our
            // result integer should be towards right as pairs of elements are present!
            // Vice-versa otherwise
            if( A[mid] == A[mid-1] && (mid % 2 != 0) || A[mid] == A[mid+1] && (mid % 2 == 0) )
                low = mid + 1;
            else
                high = mid - 1;
        }
        return -1;
	}
};

// { Driver Code Starts.

// Driver program
int main()
{
    int t,len;
    cin>>t;
    while(t--)
    {
        cin>>len;
        int arr[len];
        for(int i=0;i<len;i++){
            cin>>arr[i];
        }
        Solution ob;
        cout<<ob.search(arr, len)<<'\n';
    }
    return 0;
}
  // } Driver Code Ends
