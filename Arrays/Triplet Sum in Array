// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends

class Solution{
    public:
    //Function to find if there exists a triplet in the 
    //array A[] which sums up to X.
    bool find3Numbers(int A[], int n, int X)
    {
        if(n < 3)
            return false;
            
        // First sort the array in O(nlogn) time using default merge sort   
        sort(A, A+n);
        
        int i, j;
        for(int k = n-1; k>=2; --k){
            // Applying 2-pointer algorithm here
            i = 0;  // Index 1 acting as first pointer
            j = k-1;// Index 2 acting as second pointer
            
            while(i < j){
                if(A[i]+A[j]+A[k] == X)
                    // If triplets sum is X, return true
                    return true;
                if(A[i]+A[j]+A[k] < X)
                    // Increment i to get the next higher element A[i] as array is sorted
                    ++i;
                else if(A[i]+A[j]+A[k] > X)
                    // Decrement j to get next lower element A[j]
                    --j;
            }
        }
        // If we reach here, then no such triplet was present
        return false;
    }

};

// { Driver Code Starts.

int main()
{
	int T;
	cin>>T;
	while(T--)
	{
		int n,X;
		cin>>n>>X;
		int i,A[n];
		for(i=0;i<n;i++)
			cin>>A[i];
		Solution ob;
        cout <<  ob.find3Numbers(A, n, X) << endl;
    }
}
  // } Driver Code Ends
