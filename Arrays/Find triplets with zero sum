// { Driver Code Starts
#include<bits/stdc++.h>
#include<stdlib.h>
#include<iostream>
using namespace std;

 // } Driver Code Ends
/* You are required to complete the function below
*  arr[]: input array
*  n: size of array
*/
class Solution{
  public:
    //Function to find triplets with zero sum.
    bool findTriplets(int arr[], int n)
    {
        if( n <= 2 ) // Elements should atleast be 3
            return false;
            
        // First sort the array in O(NLogN)   
        sort(arr, arr+n);
        // Now for each element, perform 2 pointer search such that for each arr[i], there exists
        // a pair from [i+1, n-1] whose sum is equal to -arr[i].
        for( int i = 0; i < n; ++i ){
            // Now apply 2-pointer technique
            int p1 = i + 1, p2 = n - 1;
            int target = 0-arr[i];
            while( p1 < p2 ){
                
                if( arr[p1] + arr[p2] == target )
                    return true;
                else if( (arr[p1] + arr[p2]) > target )
                    --p2;
                else
                    ++p1;
            }
        }
        return false;
    }
};

// { Driver Code Starts.
int main()
{
    int t;
	cin>>t;
	while(t--){
    	int n;
    	cin>>n;
    	int arr[n]={0};
    	for(int i=0;i<n;i++)
    		cin>>arr[i];
    	Solution obj;
        if(obj.findTriplets(arr, n))
            cout<<"1"<<endl;
        else 
            cout<<"0"<<endl;
	}
    return 0;
}  // } Driver Code Ends
