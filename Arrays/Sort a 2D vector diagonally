#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
class Solution {
  public:
    void diagonalSort(vector<vector<int> >& matrix, int n, int m) {
        map<int,vector<int>> mp;
        
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                mp[(i-j)].push_back(matrix[i][j]);
            }
        }
        for(auto itr = mp.begin();itr!=mp.end();itr++)
        {
            int key = (*itr).first;
            if(key>0)
            {
                vector<int> temp1 = (*itr).second;
                sort(temp1.begin(),temp1.end());
                (*itr).second=temp1;
            }
            if(key<0)
            {
                vector<int> temp2 = (*itr).second;
                sort(temp2.rbegin(),temp2.rend());
                (*itr).second=temp2;
            }
            
        }
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(i!=j)
                {
                    int key=i-j;
                    matrix[i][j]=mp[key].front();
                    auto itr=mp[key].begin();
                    mp[key].erase(itr);
                    
                }
                
            }
        }
    }
};

// { Driver Code Starts.

int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        int n, m;
        cin>>n>>m;

        int inputline2[n*m];
        for (int i = 0; i < n*m; ++i)
            cin>> inputline2[i];
        vector<vector<int> > matrix( n , vector<int> (m, 0));

        for(int i=0; i<n; i++) {
            for (int j = 0; j < m; ++j) {
                matrix[i][j] = inputline2[i * m + j]; 
            }
        }
        
        Solution ob;
        ob.diagonalSort(matrix, n, m);

        // print the modified matrix
        for (int i = 0; i < n; i++) { 
            for (int j = 0; j < m; j++) { 
                cout << matrix[i][j] << " "; 
            } 
            cout << endl; 
        }    
    }
    return 0;
}

  // } Driver Code Ends
