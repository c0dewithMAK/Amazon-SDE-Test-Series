// C++ program to print all paths begiinning with
// root and sum as given sum
#include<bits/stdc++.h>
using namespace std;
 
// A Tree node
struct Node
{
    int data;
    struct Node *left, *right;
};
 
// Utility function to create a new node
Node* newNode(int key)
{
    Node* temp = new Node;
    temp->data = key;
    temp->left = temp->right = NULL;
    return (temp);
}

void printPathsUtil(Node *root, vector<vector<int>>& paths, vector<int> path, int S, int sum){
    
    if( !root || sum > S )
        return;
    
    if( sum + root->data == S ){
        path.push_back(root->data);
        paths.push_back(path);
        return;
    }
    else if( sum + root->data < S ){
        path.push_back(root->data);
        printPathsUtil(root->left, paths, path, S, sum + root->data);
        printPathsUtil(root->right, paths, path, S, sum + root->data);
        path.pop_back();    
    }
    
    
}

void printPaths(Node *root, int S){
    
    vector<vector<int>> paths;
    vector<int> path;
    
    printPathsUtil(root, paths, path, S, 0);
    
    for(int i = 0; i < paths.size(); ++i){
        for(int j = 0; j < paths[i].size(); ++j){
            cout << paths[i][j] << " ";
        }
        cout << "\n";
    }
}

// Driver program
int main ()
{
    /* 10
    /     \
    28     13
        /     \
        14     15
        / \     / \
    21 22 23 24*/
    Node *root = newNode(10);
    root->left = newNode(28);
    root->right = newNode(13);
 
    root->right->left = newNode(14);
    root->right->right = newNode(15);
 
    root->right->left->left = newNode(21);
    root->right->left->right = newNode(22);
    root->right->right->left = newNode(23);
    root->right->right->right = newNode(24);
 
    int sum = 38;
 
    printPaths(root, sum);
 
    return 0;
}
