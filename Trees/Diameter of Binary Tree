// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};
Node* newNode(int val) {
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}
Node* buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N') return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;) ip.push_back(str);

    // Create the root of the tree
    Node* root = newNode(stoi(ip[0]));

    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current node
            currNode->left = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size()) break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current node
            currNode->right = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


 // } Driver Code Ends
/* Tree node structure  used in the program

struct Node
{
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x){
        data = x;
        left = right = NULL;
    }
}; */

class Solution {
  public:
    // Utility function for getting height of this sub-tree rooted at 'node'
    // Takes O(n) time
    int getHeight(Node *node){
        
        if(!node)
            return 0;
            
        int lDepth = getHeight(node->left);
        int rDepth = getHeight(node->right);
        
        return (lDepth > rDepth)?(lDepth+1):(rDepth+1);
        
    }
    
    // Method 1 : Time = O(n^2)
    int getDiameterUtil(Node *root){
        
        if(!root)
            return 0;
            
        int lHeight = getHeight(root->left);
        int rHeight = getHeight(root->right);
        
        // Find the same recursively for both left and right subtrees
        int lDiameter = diameter(root->left);
        int rDiameter = diameter(root->right);
        
        
        // Diameter of the tree is (lHeight+rHeight+1). But since we have many subtrees
        // which may have larger (lHeight+rHeight+1) values, we need to recursively
        // search diameter in all subtrees as well
        
        // Final diameter is the maximum of current tree's diameter and diameters
        // of subtrees
        return max(lHeight+rHeight+1, max(lDiameter, rDiameter));    
    }
    
    // Method 2 : Efficient and much better, takes O(n) time - A Dynamic Programming Approach
    int getDiameterUtil_DP(Node *root, int& res){
        
        // Base Condition :
        if( !root )
            return 0;
            
        // Hypothesis :
        int lDia = getDiameterUtil_DP(root->left, res);
        int rDia = getDiameterUtil_DP(root->right, res);
        
        // Induction : Here we have 2 choices -
        // Either we include current 'root' in our longest path
        // Or pass on root's subtree lDia and rDia values to root's parent and not consider
        // it as root of the tree having longest path
        
        // Length of path when we don't include root
        int temp = 1 + max( lDia, rDia ); 
        
        // Length of path when we do include root, hence the 2nd parameter below in max()
        int ans = max( temp, 1 + lDia + rDia );
        
        // Finally update the res variable accordingly
        res = max( res, ans );
        
        // Also, pass-on this temp value to root's parent
        return temp;
    }
    
    // Function to return the diameter of a Binary Tree.
    int diameter(Node* root) {
        
        if( !root )
            return 0;
            
        // Method 1 : Takes O(n^2) time as for each node height is calculated which in itself
        // is a O(n) time taking task, NOT EFFICIENT
        // return getDiameterUtil(root);
        
        // Method 2 : Using Recursive Top-Down DP
        int res = 0;
        getDiameterUtil_DP(root, res);
        return res;
    }
};

// { Driver Code Starts.

/* Driver program to test size function*/
int main() {
    int t;
    scanf("%d\n", &t);
    while (t--) {
        string s;
        getline(cin, s);
        Node* root = buildTree(s);
        Solution ob;
        cout << ob.diameter(root) << endl;
    }
    return 0;
}
  // } Driver Code Ends
