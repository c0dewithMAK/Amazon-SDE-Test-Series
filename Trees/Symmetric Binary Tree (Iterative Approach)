// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
Node* buildTree(string str)
{   
    // Corner Case
    if(str.length() == 0 || str[0] == 'N')
            return NULL;
    
    // Creating vector of strings from input 
    // string after spliting by space
    vector<string> ip;
    
    istringstream iss(str);
    for(string str; iss >> str; )
        ip.push_back(str);
        
    // Create the root of the tree
    Node* root = new Node(stoi(ip[0]));
        
    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);
        
    // Starting from the second element
    int i = 1;
    while(!queue.empty() && i < ip.size()) {
            
        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();
            
        // Get the current node's value from the string
        string currVal = ip[i];
            
        // If the left child is not null
        if(currVal != "N") {
                
            // Create the left child for the current node
            currNode->left = new Node(stoi(currVal));
                
            // Push it to the queue
            queue.push(currNode->left);
        }
            
        // For the right child
        i++;
        if(i >= ip.size())
            break;
        currVal = ip[i];
            
        // If the right child is not null
        if(currVal != "N") {
                
            // Create the right child for the current node
            currNode->right = new Node(stoi(currVal));
                
            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }
    
    return root;
}
bool isSymmetric(struct Node* root);

int main()
{
    int t;
	scanf("%d ",&t);
    while(t--)
    {
        string s;
		getline(cin,s);
		Node* root = buildTree(s);
        if(isSymmetric(root))
            cout<<"True"<<endl;
        else 
            cout<<"False"<<endl;
  }
  return 0;
}
// } Driver Code Ends


/*
Structure of the node of the tree is as
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/
// Function to check whether at a particular level, elements follow palindromic pattern
bool checkPalindromeLevel(list<Node *> x){
    list<Node *>::reverse_iterator r = x.rbegin();
    list<Node *>::iterator l = x.begin();
    int half_size = x.size()/2;
    while(half_size-- > 0){
        if(*l == NULL && *r == NULL)
        {
            ++l;
            ++r;
            continue;
        }
        if(*l == NULL || *r == NULL){
            return false;
        }
        if((*l)->data != (*r)->data)
            return false;
        ++l;
        ++r;
    }
    return true;
}
// return true/false denoting whether the tree is Symmetric or not
bool isSymmetric(struct Node* root)
{
	// Tree with no nodes
	if(root == NULL)
	    return true;
	
	// Tree with only one node is symmetric
	if(!root->left && !root->right)
	    return true;
	
	// We take a list to store the nodes in the level INCLUDING any NULL as well  
	list<Node *> level;
	level.push_back(root); // Start by pushing the root node
	
	//We go on running till all levels are traversed
	while(!level.empty()){
	    
	    // Take the size of the current level i.e., number of nodes in current level
	    int size = level.size();
	    while(size-- > 0){
	        if(level.front() == NULL){
	            // If the front node is NULL, we simply pop it as it has no further left
	            // or right child
	            level.pop_front();
	            continue;
	        }
	        // Get the front node     
	        Node *temp = level.front();
	        level.pop_front();
	        // Store the left and right nodes (including any NULL) in the front node of the
	        // current level
	        if(temp->left)
	            level.push_back(temp->left);
	        if(!temp->left)
	            level.push_back(NULL);
	        if(temp->right)
	            level.push_back(temp->right);
	        if(!temp->right)
	            level.push_back(NULL);
	    }
	    // Utility function to check whether at the given level, nodes are palindromic
	    if(!checkPalindromeLevel(level))
	        return false;
	}
	return true;
}
