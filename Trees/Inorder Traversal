#include <bits/stdc++.h>
using namespace std;

// Tree Node
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};


 // } Driver Code Ends
/* A binary tree node has data, pointer to left child
   and a pointer to right child  
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
}; */

//Normal Recursive Approach
void inOrderTraversal_recur(Node* root, vector<int>& res){
    if(root == NULL)
        return;
    inOrderTraversal_recur(root->left, res);
    res.push_back(root->data);
    inOrderTraversal_recur(root->right, res);
}

//Iterative approach using stack
void inOrderTraversal_stack(Node* root,vector<int>& res){
    stack<Node *> s;
    Node *curr = root;
    while(curr != NULL || s.empty() == false){
        // Move to the leftmost node of the left subtree
        /* Reach the left most Node of the
           curr Node */
        while(curr != NULL){
            /* place pointer to a tree node on
               the stack before traversing
              the node's left subtree */
            //Keep pushing the nodes onto stack
            s.push(curr);
            //Now keep traversing left
            curr = curr->left;
        }
        /* curr must be NULL at this point */
        curr = s.top();
        s.pop();
        res.push_back(curr->data);
        /* we have visited the node and its
           left subtree.  Now, it's right
           subtree's turn */
        //Move to the right node
        curr = curr->right;
    }
}

class Solution
{
    public:
    //Function to return a list containing the inorder traversal of the tree.
    vector<int> inOrder(Node* root)
    {
      // Your code here
      vector<int> res;
      //Recursive Approach
      //inOrderTraversal_recur(root, res);
      //Iterative approach using STACK
      inOrderTraversal_stack(root, res);
      
      return res;
    }
};

// { Driver Code Starts.

// Function to Build Tree
Node* buildTree(string str)
{
    // Corner Case
    if(str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for(string str; iss >> str; )
        ip.push_back(str);

    // Create the root of the tree
    Node* root = new Node(stoi(ip[0]));

    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while(!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if(currVal != "N") {

            // Create the left child for the current node
            currNode->left = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if(i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if(currVal != "N") {

            // Create the right child for the current node
            currNode->right = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


int main() {
    int t;
    string  tc;
    getline(cin,tc);
    t=stoi(tc);
    while(t--)
    {
        string s;
        getline(cin,s);
        Node* root = buildTree(s);
        
        
        Solution ob;
        vector <int> res = ob.inOrder(root);
        for (int i = 0; i < res.size (); i++)
            cout << res[i] << " ";
        cout << endl;
    }
    return 0;
}


  // } Driver Code Ends
