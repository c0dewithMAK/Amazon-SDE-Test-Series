// { Driver Code Starts
/* program to construct tree using inorder and postorder traversals */
#include <bits/stdc++.h>
using namespace std;

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct Node {
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x) {
        data = x;
        left = right = NULL;
    }
};

/* This funtcion is here just to test buildTreeUtil() */
void preOrder(Node* node) {
    if (node == NULL) return;

    /* then print the data of node */
    printf("%d ", node->data);

    /* first recur on left child */
    preOrder(node->left);

    /* now recur on right child */
    preOrder(node->right);
}

Node* buildTree(int in[], int post[], int n);

int main() {
    int t, n;
    cin >> t;
    while (t--) {
        cin >> n;
        int in[n], post[n];
        for (int i = 0; i < n; i++) cin >> in[i];
        for (int i = 0; i < n; i++) cin >> post[i];
        Node* root = buildTree(in, post, n);
        preOrder(root);
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends


/* Tree node structure

struct Node
{
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x){
        data = x;
        left = right = NULL;
    }
};*/

//int postIndex = 0; // A global variable storing the index of current postOrder array element

// Function to actually construct the tree
Node *buildTreeWrap(int *in, int *post, int in_start, int in_end,
                    unordered_map<int, int>& m, int *postIndex){
    
    // Base condition
    if(in_start > in_end)
        return NULL;
    
    // Create root node for current subtree by taking element from postIndex index
    // of postOrder array
    Node *newNode = new Node(post[*postIndex]);
    (*postIndex)--;
    
    // Reached the position where there are no further child nodes
    if(in_start == in_end)
        return newNode;
    
    // Get the porsition of this current root node of the current subtree in
    // inOrder array to find out out left and right subtree nodes
    int pos = m[newNode->data];
    
    newNode->right = buildTreeWrap(in, post, pos+1, in_end, m, postIndex);
    newNode->left = buildTreeWrap(in, post, in_start, pos-1, m, postIndex);
    
    return newNode;
}

//Function to return a tree created from postorder and inoreder traversals.
Node *buildTree(int in[], int post[], int n) {
    // Your code here
    unordered_map<int, int> m;
    for(int i = 0; i<n; ++i){
        m[in[i]] = i;
    }
    int postIndex = n - 1;
    return (buildTreeWrap(in, post, 0, n-1, m, &postIndex));
}
