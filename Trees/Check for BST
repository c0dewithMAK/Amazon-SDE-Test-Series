// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;
#define MAX_HEIGHT 100000

// Tree Node
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};




 // } Driver Code Ends


class Solution
{
    public:
    /* APPROACH 1 : 
    // Utility function to find maximum of the left subtree
    int findMax(Node *node){
        Node *curr = node;
        int max = 0;
        while(curr){
            max = curr->data;
            curr = curr->right;
        }
        return max;
    }
    
    // Utility function to find minimum of the right subtree
    int findMin(Node *node){
        Node *curr = node;
        int min = 0;
        while(curr){
            min = curr->data;
            curr = curr->left;
        }
        return min;
    }
    
    void isBSTUtil1(Node *node, bool& flag){
        if(!node || (!node->left && !node->right) || !flag)
            return;
        
        if(node->left && node->right){
            // Non-leaf node
            int maxLeft = findMax(node->left);
            int minRight = findMin(node->right);
            
            if(node->data <= maxLeft || node->data >= minRight){
                //Current node should be greater than the max element in left subtree
                //and smaller than the minimum element of the right subtree
                flag = false;
            }
            
            if(node->left->data >= node->data || node->right->data <= node->data)
                flag = false;
            //cout << "1-Flag is " << flag << ". ";
        }
        else if(node->left){
            
            // node->right is NULL
            int maxLeft = findMax(node->left);
            if(node->data <= maxLeft){
                //Current node should be greater than the max element in left subtree
                flag = false;
            }
            
            if(node->data <= node->left->data)
                flag = false;
        }
        else if(node->right){
            //node->left is NULL
            
            int minRight = findMin(node->right);
            if(node->data >= minRight){
                //Current node should be lesser than the min element in right subtree
                flag = false;
            }
            if(node->data >= node->right->data)
                flag = false;
        }
        
        if(flag){
            isBSTUtil1(node->left, flag);
            isBSTUtil1(node->right, flag);
        }
    }*/
    
    // APPROACH 2:
    bool isBSTUtil2(Node *node, int l, int r){
        
        if(!node)
            return 1;
        if(node->data <= l || node->data >= r)
            return 0;
        
        return (isBSTUtil2(node->left, l, node->data)) &&
                    (isBSTUtil2(node->right, node->data, r));
    }
    
    //Function to check whether a Binary Tree is BST or not.
    bool isBST(Node* root) 
    {
        /* Approach 1 below -
        bool flag = true;
        isBSTUtil1(root, flag);
        return flag; */
        
        // Approach 2 - Simpler
        return isBSTUtil2(root, INT_MIN, INT_MAX);
    }
};




// { Driver Code Starts.

// Function to Build Tree
Node* buildTree(string str)
{
   // Corner Case
   if(str.length() == 0 || str[0] == 'N')
       return NULL;

   // Creating vector of strings from input
   // string after spliting by space
   vector<string> ip;

   istringstream iss(str);
   for(string str; iss >> str; )
       ip.push_back(str);

   // Create the root of the tree
   Node* root = new Node(stoi(ip[0]));

   // Push the root to the queue
   queue<Node*> queue;
   queue.push(root);

   // Starting from the second element
   int i = 1;
   while(!queue.empty() && i < ip.size()) {

       // Get and remove the front of the queue
       Node* currNode = queue.front();
       queue.pop();

       // Get the current node's value from the string
       string currVal = ip[i];

       // If the left child is not null
       if(currVal != "N") {

           // Create the left child for the current node
           currNode->left = new Node(stoi(currVal));

           // Push it to the queue
           queue.push(currNode->left);
       }

       // For the right child
       i++;
       if(i >= ip.size())
           break;
       currVal = ip[i];

       // If the right child is not null
       if(currVal != "N") {

           // Create the right child for the current node
           currNode->right = new Node(stoi(currVal));

           // Push it to the queue
           queue.push(currNode->right);
       }
       i++;
   }

   return root;
}

void inorder(Node *root, vector<int> &v)
{
    if(root==NULL)
        return;

    inorder(root->left, v);
    v.push_back(root->data);
    inorder(root->right, v);
}

int main() {
 
   int t;
   string tc;
   getline(cin, tc);
   t=stoi(tc);
   while(t--)
   {
    string s; 
    getline(cin, s);
    Node* root = buildTree(s);
    Solution ob;
    if(ob.isBST(root)) 
        cout<<"1\n";
        
    else
        cout<<"0\n";
   }
   return 0;
}


//Position this line where user code will be pasted
  // } Driver Code Ends
