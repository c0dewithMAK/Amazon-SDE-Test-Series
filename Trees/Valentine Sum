// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    Node* left;
    Node* right;
};

Node* newNode(int val)
{
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;
    
    return temp;
}

Node* buildTree(string str)
{   
    // Corner Case
    if(str.length() == 0 || str[0] == 'N')
            return NULL;
    
    // Creating vector of strings from input 
    // string after spliting by space
    vector<string> ip;
    
    istringstream iss(str);
    for(string str; iss >> str; )
        ip.push_back(str);
        
    // Create the root of the tree
    Node* root = newNode(stoi(ip[0]));
        
    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);
        
    // Starting from the second element
    int i = 1;
    while(!queue.empty() && i < ip.size()) {
            
        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();
            
        // Get the current node's value from the string
        string currVal = ip[i];
            
        // If the left child is not null
        if(currVal != "N") {
                
            // Create the left child for the current node
            currNode->left = newNode(stoi(currVal));
                
            // Push it to the queue
            queue.push(currNode->left);
        }
            
        // For the right child
        i++;
        if(i >= ip.size())
            break;
        currVal = ip[i];
            
        // If the right child is not null
        if(currVal != "N") {
                
            // Create the right child for the current node
            currNode->right = newNode(stoi(currVal));
                
            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }
    
    return root;
}


 // } Driver Code Ends
/*
// node structure:

struct Node
{
    int data;
    Node* left;
    Node* right;
};

*/



class Solution{

    public:
    void cacheNodes(Node * node, int target)
    {
        if( !node )
            return;
        
        if( node->data == target )
        {
            source = node;    
        }
        
        if( node->left )
        {
            umap[node->left] = node;
            cacheNodes(node->left, target);
        }
        
        if( node->right )
        {
            umap[node->right] = node;
            cacheNodes(node->right, target);
        }
        
    }
    int sum_at_distK(Node* root, int target, int k)
    {
        if( !root )
            return -1;
        source = NULL;
        umap[root] = NULL;
        int currLevel = 0;
        int totalSum = 0;
        // Cache the nodes and their parents
        cacheNodes(root, target);
        
        if( !source )
            return 0;
        
        // Perform BFS
        queue<Node*> q;
        set<Node*> s;
        q.push(source);
        s.insert(source);
        
        while( !q.empty() && currLevel <= k )
        {
            int size = q.size();
            while( size-- )
            {
                Node* front = q.front();
                q.pop();
                totalSum += front->data;
                
                if( umap[front] && s.find(umap[front]) == s.end() ){
                    q.push(umap[front]);
                    s.insert(umap[front]);
                }
                
                if( front->left && s.find(front->left) == s.end() ){
                    q.push(front->left);
                    s.insert(front->left);
                }
        
                if( front->right && s.find(front->right) == s.end() ){
                    q.push(front->right);
                    s.insert(front->right);
                }
            }
            ++currLevel;
        }
        return totalSum;
    }
private:
    unordered_map<Node*, Node*> umap;
    Node *source;
    // key -> some node->data, value->it's parent
};


// { Driver Code Starts.
int main()
{
    int t;
    cin>>t;
    getchar();
    
    while(t--)
    {
        string s;
        getline(cin,s);
        Node* root = buildTree(s);
        
        int target,k;
        cin>> target >> k;
        getchar();
        Solution obj;
        cout<< obj.sum_at_distK(root,target,k) << endl;
    }
	return 0;
}

  // } Driver Code Ends
