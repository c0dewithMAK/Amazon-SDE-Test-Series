// { Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
// User function template for C++

class Solution
{
    public:
    
    string usingMap(string arr[], int n){
        // Method 1 : Using normal hashing
        map<string, pair<int, int>> m;
        int max = INT_MIN;
        int lastPos = -1;
        for(int i = 0; i < n; ++i){
            
            if( m.find(arr[i]) == m.end() ){
                m[arr[i]] = {1, i};
            }
            else
                ++m[arr[i]].first;
            
            if( m[arr[i]].first > max )
                max = m[arr[i]].first;
        }
        
        map<string, pair<int, int>>::iterator itr;
        string res;
        for(itr = m.begin(); itr != m.end(); ++itr){
            if( (itr->second).first == max && (itr->second).second > lastPos ){
                lastPos = (itr->second).second;
                res = itr->first;
            }
        }
        return res;
        
        // Method 2: Using Trie (To be done later)
    }
    
    //Function to find most frequent word in an array of strings.
    string mostFrequentWord(string arr[], int n) 
    {
        // Method 1 : Using HashingMap
        return usingMap(arr, n);
        
        // Method 2 : Using Trie (Better method)
    }
};

// { Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;

        string arr[n];
        for (int i = 0; i < n; i++) cin >> arr[i];
        Solution obj;
        cout << obj.mostFrequentWord(arr, n) << endl;
    }
    return 0;
}
  // } Driver Code Ends
