// { Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
// User function Template for C++

class Solution
{
    public:
    
    void dfs(vector<int> adj[], int vis[], int i){
        vis[i]=1;
        for(auto child:adj[i]){
            if(vis[child]==0){
                dfs(adj,vis,child);
            }
        }
    }
    bool isstronglyconnected(vector<int> adj[],int in[]){
        int vis[26];
        memset(vis,0,sizeof(vis));
        int i;
        for(i=0;i<26;i++){
            if(adj[i].size()>0){
                break;  
            }
        }
        dfs(adj,vis,i);
        for(int j=0;j<26;j++){
            if(adj[j].size()>0 && vis[j]==0){
                return false;
            }
        }
        vector<int> trans_adj[26];

        // reversing the edges
        for(int j=0;j<26;j++){
            for(auto child:adj[j]){
                trans_adj[child].push_back(j);
            }
        }
        for(int j=0;j<26;j++){
            in[j]=trans_adj[j].size();
        }
        
        memset(vis,0,sizeof(vis));
        dfs(trans_adj,vis,i);
        for(int j=0;j<26;j++){
            if(trans_adj[j].size()>0 && vis[j]==0){
                return false;
            }
        }
        return true;
    }
    int isCircle(int N, vector<string> A)
    {
        vector<int> adj[26];
        for(int i=0;i<A.size();i++){ 
            int n=A[i].size();
            int a=A[i][0]-'a';
            int b=A[i][n-1]-'a';
            adj[a].push_back(b);
        }
        int in[26];
        
        // Kosaraju's Algorithm
        if(isstronglyconnected(adj,in)==false){
            return 0;
        }
        
        // Now check indegrees
        for(int i=0;i < 26; i++){
            if(adj[i].size() != in[i]){
                return 0;
            }
        }
        return 1;
    } 
};

// { Driver Code Starts.
int main()
{
    int t;
    cin>>t;
    while(t--){
        int N;
        cin>>N;
        vector<string> A;
        string s;
        
        for(int i = 0;i < N; i++)
        {
            cin>>s;
            A.push_back(s);
        }
        
        Solution ob;
        cout<<ob.isCircle(N, A)<<endl;
    }
    return 0;
}  // } Driver Code Ends
