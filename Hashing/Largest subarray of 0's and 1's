// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
/*You are required to complete this method*/

// arr[] : the input array containing 0s and 1s
// N : size of the input array

// return the maximum length of the subarray
// with equal 0s and 1s
class Solution{
  public:
    int maxLen(int arr[], int N)
    {
        map<int, int> m; // key = sum, value = index at which this sum is found
        int sum = 0;
        int maxLen = 0;
                
        // Loop through all elements and cache each of thes sum values and the respective 
        // indices at which these sum values found in the hash map
        for(int i = 0; i < N; ++i){
            if( arr[i] == 0 )
                sum -= 1;
            else
                sum += 1;
            
            if( sum == 0 ){
                // If at any time sum == 0, this means from the 0th index till current index
                // num of 0 and 1 are equal.
                maxLen = max(maxLen, i+1);
            }
            else if( m.find(sum) == m.end() ){
                // If a new sum value occurs, cache it into the map
                m[sum] = i;
            }
            else{
                // If a similar sum value is found which is previously already cached into map
                // this means from that sum's index vaue till current index, overall sum remains
                // constant and there are equal number of 1s and -1s (or 0s).
                // Calculate this length.
                maxLen = max(maxLen, i - m[sum]);
            }
        }
            
        return maxLen;
    }
};


// { Driver Code Starts.

int main()
{
    // your code goes here
    int T;
    cin >> T;
    while (T--)
    {
        int n;
        cin >> n;
        int a[n];
        for (int i = 0; i < n; i++)
            cin >> a[i];
        Solution obj;
        cout << obj.maxLen(a, n) << endl;
    }
    return 0;
}  // } Driver Code Ends
