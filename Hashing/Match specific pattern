// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

vector<string> findMatchedWords(vector<string> dict,string pattern);

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		vector<string> s(n);
		for(int i=0;i<n;i++)
		    cin>>s[i];
		
		string tt;
		cin>>tt;
		
		vector<string> res = findMatchedWords(s,tt);
        sort(res.begin(),res.end());
		for(int i=0;i<res.size();i++)
		    cout<<res[i]<<" ";
		cout<<endl;
		
	}
}// } Driver Code Ends


// Utility function that encodes a string
string encodeStr(string str){
    int num = 1;
    map<char, int> m;
    for(int i = 0; i<str.size(); ++i){
        if( m.find(str[i]) == m.end() ){
            m[str[i]] = num;
            ++num;
        }
    }
    
    // Convert this encoded literal into string of numbers
    string encodedStr;
    for(int i = 0; i < str.size(); ++i){
        encodedStr += to_string(m[str[i]]);
    }
    
    return encodedStr;
}

/* The function returns a  vector of strings 
present in the dictionary which matches
the string pattern.
You are required to complete this method */
vector<string> findMatchedWords(vector<string> dict,string pattern)
{
    map<char, char> m;
    vector<string> res;
    
    string encodedPattern = encodeStr(pattern); // Encode the pattern first
    for(int i = 0; i < dict.size(); ++i){
        if( encodedPattern == encodeStr(dict[i]) )
            res.push_back(dict[i]);
    }
    return res;
}
