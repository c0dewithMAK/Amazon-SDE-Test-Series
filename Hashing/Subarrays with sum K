// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
//User function Template for C++

class Solution{
    public:
    int findSubArraySum(int arr[], int N, int k)
    {

        if( N == 0 )
            return 0;
        
        unordered_map<int, vector<int>> m;
        map<int, int>::iterator itr;
        int resCount = 0;
        int currSum = 0;
        
        // This below contains {start, end} indices of all resultant subarrays who have sum = k 
        vector<pair<int, int>> resSubArrays;
        
        // Calculate the Prefix-Sum currSum variable on-the-go
        for(int i = 0; i < N; ++i){
            // Calculate the prefix sum till now (ith index) as below
            currSum += arr[i];
            
            // If this is true, it means from 0th to current ith index, subarray has sum = k 
            if( currSum == k ){
                resSubArrays.push_back({0, i});
                ++resCount;
            }
                
            if( m.find(currSum - k) != m.end() ){
                // Store count of all indices seen so far for corresponding (currSum-k) key
                resCount += m[currSum-k].size();
                for(int v : m[currSum-k]){
                    // Traverse and add the subarrays for repititive values
                    resSubArrays.push_back({v+1, i});
                }
            }
            
            // Finally add currSum's index i to it in map    
            m[currSum].push_back(i);
        }
        
        // This prints all the subarrays : (Commented Out)
        cout << "Resultant Sub Arrays : \n";
        for(int i = 0; i < resSubArrays.size(); ++i){
            for(int j = resSubArrays[i].first; j <= resSubArrays[i].second; ++j){
                cout << arr[j] << " ";
            }
            cout << "\n";
        }
        
        return resCount;
    }
};

// { Driver Code Starts.
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int N;
        cin >> N;
        int Arr[N];
        for(int i=0;i<N;i++)    
            cin>>Arr[i];
        int k;
        cin>>k;
        Solution obj;
        cout<<obj.findSubArraySum(Arr, N, k)<<endl;
    }
    return 0;
}  // } Driver Code Ends
