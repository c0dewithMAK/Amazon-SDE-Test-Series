// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution{
	public:
	const int mod = 1e9 + 7;
	int memo[1001];
	// Utility function to get the maximum of two and three integers
    int max(int a, int b) { return (a > b)? a : b;}
    int max(int a, int b, int c) { return max(a, max(b, c));}
    
	int prodCut_Recur(int n){
	    
	    if( n == 1 )    return 0;
	    if( n == 2 )    return 1;
	    
	    int maxProduct = 1;
	    for(int i = 1; i < n; ++i){
	        maxProduct = max( maxProduct, i * (n - i), i * prodCut_Recur(n - i) );
	    }
	    return maxProduct;
	}
	
	int prodCut_Memo(int n){
	    
	    if( memo[n] != -1 )
	        return memo[n];
	        
	    // Base Conditions
	    if( n == 1 || n == 0 )    
	        return ( memo[n] = 0 );
	    if( n == 2 )
	        return ( memo[n] = 1 );
	    
	    int maxProduct = 1;
	    for(int i = 1; i < n; ++i){
	        if( memo[n - i] == -1 )
	            memo[n - i] = prodCut_Memo(n - i);
	        maxProduct = max( maxProduct, i * (n - i), i * memo[n - i] ) % mod;
	    }
	    return ( memo[n] = maxProduct % mod );
	}
	
	int maxProduct(int n)
	{
	    // Method 1 : Using Recursion (gives TLE)
        // return prodCut_Recur(n);
        
        // Method 2 : Using Memoization
        memset(memo, -1, sizeof(memo));
        return prodCut_Memo(n);
	}
};

// { Driver Code Starts.
int main() 
{
   	
   
   	int t;
    cin >> t;
    while (t--)
    {
        int n;
        cin >> n;


	    Solution ob;
	    cout << ob.maxProduct(n) << "\n";

	     
    }
    return 0;
}
  // } Driver Code Ends
