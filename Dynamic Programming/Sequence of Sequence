// { Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
// User function Template for C++

class Solution{
public:
    int memo[101][101];
    // Time = O(2^(m+n)) and Space = O(m+n)
    int numSeq_recur(int m, int n){
        
        if( m < n )
            return 0;
            
        if( n == 0 )
            return 1; // 1 sequence correctly found, so return 1
            
        // First call while dividing m as m/2 and decrease n as we are counting m in our knapsack
        // Then after all these calls are over, decrease m to m-1 and again repeat the process
        // In second call, don't decrease n as we are again starting a fresh sub-search with m as
        // changed to m-1
        return numSeq_recur(m/2, n-1) + numSeq_recur(m-1, n);
    }
    
    // Time = O(m*n) as overlapping subcalls are omitted for a given (m, n) state
    // Space = O(m+n) + O(m*n)
    int numSeq_memo(int m, int n){
        
        if( m < n )
            return ( memo[m][n] = 0 );
            
        if( n == 0 )
            return ( memo[m][n] = 1 );
            
        if( memo[m][n] != -1 )
            // If state (m, n) has been previously encountered, don't again do recursive calls
            return memo[m][n];
            
            
        return ( memo[m][n] = numSeq_memo(m/2, n-1) + numSeq_memo(m-1, n) );
    }
    
    // Time = O(m*n) and Space = O(m*n), Most Efficient Approach
    int numSeq_bottomUp(int m, int n){
        
        int dp[m+1][n+1];
        memset(dp, -1, sizeof(dp));
        
        // Initialization statements
        for(int i = 0; i <= m; ++i)
            // If n is 0, no sequence can be formed hence 0 is stored
            dp[i][0] = 0;
        for(int i = 0; i <= n; ++i)
            // If m itself is zero, then obviously no sequences can be formed
            dp[0][i] = 0;
            
        for(int i = 1; i <= m; ++i){
            for(int j = 1; j <= n; ++j){
                
                if( i < j ){
                    // Basically means if m < n, then logically no sequence can be formed
                    dp[i][j] = 0;
                }
                else if( j == 1 ){
                    // If our n = 1, then no matter what is our m value, our subsequence will
                    // be 1, 2, 3, .... m => m sequences (i in our loop case)
                    dp[i][j] = i;
                }
                else{
                    // This can be very easily derived from our recurrence relation above
                    dp[i][j] = dp[i-1][j] + dp[(i/2)][j-1];
                }
            }
        }
        return dp[m][n];
    }
    
    int numberSequence(int m, int n){
        
        if( m > 100 || n > 100 )
            // Following the constraints of the problem, else this gives error for 1 testcase
            return 0;
        
        // Method 1 : Not Efficient (should give TLE but doesn't)
        // return numSeq_recur(m, n);
        
        // Method 2 : Memoization/Top-Down DP
        // memset(memo, -1, sizeof(memo));
        // return numSeq_memo(m, n);
        
        // Method 3 : Most Efficient, Using Bottom Up Tabulation DP
        return numSeq_bottomUp(m, n);
    }
};

// { Driver Code Starts.
int main(){
    int t;
    cin>>t;
    while(t--){
        int m, n;
        cin>>m>>n;
        
        Solution ob;
        cout<<ob.numberSequence(m, n)<<endl;
    }
    return 0;
}  // } Driver Code Ends
