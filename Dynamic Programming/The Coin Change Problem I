#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

/*
 * Complete the 'getWays' function below.
 *
 * The function is expected to return a LONG_INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER n
 *  2. LONG_INTEGER_ARRAY c
 */
 
vector<vector<long>> memo;
long coinChange_recur(vector<long>& coins, int n, int w) {
    
    if ( w == 0 ) { return 1; }
    if ( n == 0 ) return 0;
    
    if( w >= coins[n-1] )
    {
                    // First include
        return  ( coinChange_recur(coins, n, w - coins[n-1]) +
                    // Then exclude
                    coinChange_recur(coins, n - 1, w) );
    }
    else{
        // Excluding is our only option
        return coinChange_recur(coins, n - 1, w);
    }
}  

long coinChange_memo(vector<long>& coins, int n, int w){
    
    if( w == 0 )
        return 1;
    if( n == 0 )
        return 0;
        
    if( memo[n][w] != -1 )
        return memo[n][w];
        
    if( coins[n-1] <= w )
        return memo[n][w] = coinChange_memo(coins, n, w - coins[n-1]) +
                            coinChange_memo(coins, n - 1, w);
    else
        return memo[n][w] = coinChange_memo(coins, n - 1, w);
}

long coinChange_bottomUp(vector<long>& coins, int n, int w){
    
    vector<vector<long>> dp(n + 1, vector<long>(w + 1, -1));
    for(int i = 0; i <= n; ++i)
        dp[i][0] = 1;
    for(int i = 1; i <= w; ++i)
        dp[0][i] = 0;
        
    for(int i = 1; i <= n; ++i){
        for(int j = 1; j <= w; ++j){
            if( j >= coins[i-1] )
                dp[i][j] = dp[i][j - coins[i - 1]] + dp[i - 1][j];
            else
                dp[i][j] = dp[i - 1][j];    
        }
    }
    return dp[n][w];
}

long getWays(int n, vector<long> c) {
    
    // Method 1 : Using recursion (gives TLE)
    // return coinChange_recur(c, c.size(), n);
    
    // Method 2 : Using Memoization
    //memo = vector<vector<long>>(c.size()+1, vector<long>(n+1, -1));
    //return coinChange_memo(c, c.size(), n);
    
    // Method 3 : Using Bottom Up DP (Best Method)
    return coinChange_bottomUp(c, c.size(), n);
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string first_multiple_input_temp;
    getline(cin, first_multiple_input_temp);

    vector<string> first_multiple_input = split(rtrim(first_multiple_input_temp));

    int n = stoi(first_multiple_input[0]);

    int m = stoi(first_multiple_input[1]);

    string c_temp_temp;
    getline(cin, c_temp_temp);

    vector<string> c_temp = split(rtrim(c_temp_temp));

    vector<long> c(m);

    for (int i = 0; i < m; i++) {
        long c_item = stol(c_temp[i]);

        c[i] = c_item;
    }

    // Print the number of ways of making change for 'n' units using coins having the values given by 'c'

    long ways = getWays(n, c);

    fout << ways << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
