// { Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
//Back-end complete function Template for C++

class Solution {
  public:
    int memo[1005];
    int minCostUtil(int N, vector<int>& cost){
        
        if( memo[N] != -1 )
            return memo[N];
            
        if( N < 0 )
            return 0;
        
        if( memo[N - 1] == -1 )
            memo[N - 1] = minCostUtil(N - 1, cost);
        if( memo[N - 2] == -1 )
            memo[N - 2] = minCostUtil(N - 2, cost);
            
        return memo[N] = cost[N - 1] + min( memo[N - 1], memo[N - 2] );
    }
    
    int minCostClimbingStairs(vector<int>&cost ,int N) {
        // Solution using memoization (Space COnsuming)
        // memset(memo, -1, sizeof(memo));
        // return min( minCostUtil(N, cost), minCostUtil(N - 1, cost) );
        
        // Better Solution
        for(int i = 2; i <N; ++i)
            cost[i] = cost[i] + min( cost[i-1], cost[i-2] );
            
        return min( cost[N-1], cost[N-2] );
    }
};

// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int N;
        
        cin>>N;
        vector<int>cost(N);
        
        for(int i=0 ; i<N ; i++){
            cin>>cost[i];
        }

        Solution ob;
        cout<<ob.minCostClimbingStairs(cost,N);
        cout<<"\n";
    }
    return 0;
}  // } Driver Code Ends
