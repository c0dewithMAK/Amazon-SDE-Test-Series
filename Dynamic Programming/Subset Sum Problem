// { Driver Code Starts
//Initial template for C++

#include<bits/stdc++.h> 
using namespace std; 

 // } Driver Code Ends
//User function template for C++

class Solution{   
public:
    int dp[101][10001];
    vector<vector<int>> memo;
    
    // Time : O(2^N) and Space = O(1) apart from auxiliary function stack space of O(N) 
    bool usingRecursion(int N, int arr[], int sum){
        
        if( N == 0 && sum != 0 )
            return false;
        if( sum == 0 )
            return true;
            
        if( sum < arr[N-1] )
            return isSubsetSum(N-1, arr, sum);
        else
            return (isSubsetSum( N-1, arr, sum - arr[N-1] ) || isSubsetSum( N-1, arr, sum ));
    }
    
    // Time Complexity : O(N*sum) and Space : O(N)(for recursion) + O(N*sum)(for dp array)
    int recurMemoization(int N, int arr[], int sum){
        
        if( sum == 0 )
            return 1;
        if( N == 0 )
            return 0;
        
        if( dp[N - 1][sum] != -1 )
            return dp[N - 1][sum];
            
        if( sum < arr[N - 1] )
            return (dp[N - 1][sum] = recurMemoization(N - 1, arr, sum));
        else{
             return (dp[N - 1][sum] = (recurMemoization( N - 1, arr, sum - arr[N - 1] ) || 
                         recurMemoization( N - 1, arr, sum )));
        }
    }
    
    // Time is O(N*sum) and Space is only O(N*sum), most efficient approach
    int bottomUpDP(int N, int arr[], int sum){
        
        // Initialization first
        for(int i = 0; i <= N; ++i)
            // Because an empty subset has sum-value = 0, since j is our sub-sum
            dp[i][0] = 1;
            
        for(int i = 1; i <= sum; ++i)
            dp[0][i] = 0;
        
        for(int i = 1; i <= N; ++i){
            for(int j = 1; j <= sum; ++j){
                    if( j < arr[i-1] )
                        dp[i][j] = dp[i-1][j];
                    if( j >= arr[i-1])
                        dp[i][j] = ( dp[i-1][j-arr[i-1]] || dp[i-1][j] );
            }
        }
        return dp[N][sum];
    }
    
    bool isSubsetSum(int N, int arr[], int sum){
        
        // Method 1 (gives TLE): using simple recursion 
        // return usingRecursion(N, arr, sum);
        
        // Method 2 : Using Memoization + Recursion
        //memset(dp, -1, sizeof(dp));
        //return recurMemoization(N, arr, sum);
        
        // Method 3: Most Efficient
        memset(dp, -1, sizeof(dp));
        return bottomUpDP(N, arr, sum);
    }
};

// { Driver Code Starts.
int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        int N, sum;
        cin >> N;
        int arr[N];
        for(int i = 0; i < N; i++){
            cin >> arr[i];
        }
        cin >> sum;
        
        Solution ob;
        cout << ob.isSubsetSum(N, arr, sum) << endl;
    }
    return 0; 
} 
  // } Driver Code Ends
