// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution{
	public:
	int LongestBitonicSequence(vector<int> arr)
	{
	    int n = arr.size();
	    vector<int> lis(n, 1); // array containing longest increasing lengths upto each index
	    vector<int> lds(n, 1); // array containing longest decreasing lengths upto each index
	    int maxLen = INT_MIN;
	    
	    // First find the Longest Increasing Subsequence
	    for(int i = 0; i < n; ++i){
	        for(int j = 0; j < i; ++j){
	            if( arr[j] < arr[i] )
	                lis[i] = max( lis[i], 1 + lis[j] );
	        }
	    }
	        
	    // Then find the Longest Decrease Subsequence
	    for(int i = n - 1; i >= 0; --i){
	        for(int j = n-1; j > i; --j){
	            if( arr[j] < arr[i] )
	                lds[i] = max( lds[i], 1 + lds[j] );
	        }
	    }    
	    
	    // Now for each index calculate lengths of LIS(left portion) + LDS(right portion)
	    for(int i = 0; i < n; ++i){
	        // Get the max length
	        maxLen = max( maxLen, lis[i] + lds[i] - 1 );
	    }
	 
	    return maxLen;
	}
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n;
		cin >> n;
		vector<int>nums(n);
		for(int i = 0; i < n; i++)
			cin >> nums[i];
		Solution ob;
		int ans = ob.LongestBitonicSequence(nums);
		cout << ans <<"\n";
	}
	return 0;
}  // } Driver Code Ends
