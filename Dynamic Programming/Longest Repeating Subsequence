// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
	public:
	
    int lrs(int n, int m, string& s, string& t){
        if( n == 0 )
            return 0;
	    int dp[n+1][m+1];
	    memset(dp, 0, sizeof(dp));
	    for(int i = 0; i <= n; ++i){
            for(int j = 0; j <= m; ++j){
                if( i == 0 || j == 0 )
                    dp[i][j] = 0;
	            else if( s[i-1] == t[j-1] && i != j )
	                dp[i][j] = 1 + dp[i-1][j-1];
	            else
	                dp[i][j] = max( dp[i][j-1], dp[i-1][j] );
	        }
	    }
	   return dp[n][m];
	}
	    
	int LongestRepeatingSubsequence(string str){
	    return lrs(str.size(), str.size(), str, str);
	}

};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		string str;
		cin >> str;
		Solution obj;
		int ans = obj.LongestRepeatingSubsequence(str);
		cout << ans << "\n";
	}
	return 0;
}  // } Driver Code Ends
