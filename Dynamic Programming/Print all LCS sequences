// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution
{
	public:
	    int dp[101][101];
	    vector<string> res;
	    // set<string> resRecur; Commented out as it is only used for Method 1 
	    
	    void storeAllLCS_Backtrack(int i, int j, string& s, string& t, int ans, string tempSeq){
	        
            if( ( i <= 0 || j <= 0 ) || ans == 0 ){
                if( ans == 0 ){
                    string temp  = tempSeq;
                    reverse( temp.begin(), temp.end() );
                    resRecur.insert(temp);
                }
                return;
            }
            if( s[i-1] == t[j-1] ){
                storeAllLCS_Backtrack( i-1, j-1, s, t, ans-1, tempSeq + s[i-1] );
                if( dp[i-1][j] == ans )
                    storeAllLCS_Backtrack( i-1, j, s, t, ans, tempSeq );
                if( dp[i][j-1] == ans )
                    storeAllLCS_Backtrack( i, j-1, s, t, ans, tempSeq );
            }
            else{
                if( dp[i-1][j] == dp[i][j-1] ){
                    storeAllLCS_Backtrack( i-1, j, s, t, ans, tempSeq);
                    storeAllLCS_Backtrack( i, j-1, s, t, ans, tempSeq);
            }
            else if( dp[i-1][j] > dp[i][j-1] )
                storeAllLCS_Backtrack( i-1, j, s, t, ans, tempSeq);
            else
                storeAllLCS_Backtrack( i, j-1, s, t, ans, tempSeq);
            }
        }
	    
	    void storeAllLCS(int n, int m, string&s, string& t){
	        
	        vector<vector<unordered_set<string>>> allLcs ( 101, 
	                vector<unordered_set<string>>(101));
	        // We have taken unordered_set here so as to remove the possibility of redundant
	        // sub-LC sequences as we need only one occurrence of the sub-LCS
	        // Also unordered_set performs better compared to set/ordered_set
	        for(int i = 0; i <= n; ++i)
	            allLcs[i][0].insert("");
	            
	        for(int i = 0; i <= m; ++i)
	            allLcs[0][i].insert("");
	            
	        for(int i = 1; i <= n; ++i){
	            for(int j = 1; j <= m; ++j){
	                if( s[i-1] == t[j-1] ){
	                    for( string prev : allLcs[i-1][j-1] ){
	                        allLcs[i][j].insert(prev + s[i-1]);
	                    }
	                }
	                else if( dp[i-1][j] == dp[i][j-1] ){
	                    // Store all previous strings from both cells instead of just one
	                    for( string prev : allLcs[i-1][j] )
	                        allLcs[i][j].insert(prev);
	                    for( string prev : allLcs[i][j-1] )
	                        allLcs[i][j].insert(prev);
	                }
	                else{
	                    // Get the maximum length set out of the two dp cells
	                    unordered_set<string> best = ( dp[i-1][j] > dp[i][j-1] ) ? 
	                                    ( allLcs[i-1][j] ) : ( allLcs[i][j-1] );
	                                    
	                    for( string prev : best )
	                        allLcs[i][j].insert(prev);
	                }
	            }
	        }
	        // Last element of allLcs will contain all LCS of max lengths
	        res = vector<string>( allLcs[n][m].begin(), allLcs[n][m].end() );
	    }
	    
	    void lcs_Tabulation(int n, int m, string& s, string& t){
	        memset(dp, 0, sizeof(dp));
	        for(int i = 0; i <= n; ++i){
	            for(int j = 0; j <= m; ++j){
	                if( i == 0 || j == 0 )
	                    dp[i][j] = 0;
	                else if( s[i-1] == t[j-1] )
	                    dp[i][j] = 1 + dp[i-1][j-1];
	                else
	                    dp[i][j] = max( dp[i-1][j], dp[i][j-1] );
	            }
	        }
	        
	        // Method 1 : Using Recursion + Backtracking (gives TLE)
	        // string tempSeq;
	        // storeAllLCS_Backtrack(n, m, s, t, dp[n][m], tempSeq);
	        // res = vector<string>( resRecur.begin(), resRecur.end() );
	        
	        // Method 2 : Using more space but is much more efficient
	        storeAllLCS(n, m, s, t);
	    }
	    
		vector<string> all_longest_common_subsequences(string s, string t)
		{
		    
		    if( s.size() == 0 || t.size() == 0 )
		        return res;
		    
		    lcs_Tabulation(s.size(), t.size(), s, t);
		    sort( res.begin(), res.end() );
		    return res;
		}
};



// { Driver Code Starts.
int main(){
    int T;
    cin >> T;
    while(T--)
    {
    	string s, t;
    	cin >> s >> t;
    	Solution ob;
    	vector<string> ans = ob.all_longest_common_subsequences(s, t);
    	for(auto i: ans)
    		cout << i << " ";
    	cout << "\n";
    }
	return 0;
}

  // } Driver Code Ends
