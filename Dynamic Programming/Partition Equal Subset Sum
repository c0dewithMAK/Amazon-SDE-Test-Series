// { Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
// User function Template for C++

class Solution{
public:
    int memo[101][1001];
    
    // Time = O(2^N) and Space = O(N)
    int subsetSum_recur(int arr[], int N, int sum){
        
        if( sum == 0 )
            return 1;
        if( N == 0 )
            return 0;
            
        if( sum < arr[N-1] )
            return subsetSum_recur(arr, N-1, sum);
        else{
            return subsetSum_recur(arr, N-1, sum - arr[N-1]) || subsetSum_recur(arr, N-1, sum);
        }
    }
    
    // Time = O(N*sum) and Space = O(N*sum)+O(N)
    int subsetSum_memo(int arr[], int N, int sum){
        
        if( sum == 0 )
            return 1;
        if( N == 0 )
            return 0;
            
        if( memo[N-1][sum] != -1 )
            return memo[N-1][sum];
            
        if( sum < arr[N-1] )
            return ( memo[N-1][sum] = subsetSum_memo(arr, N-1, sum) );
        else
            return ( memo[N-1][sum] = (subsetSum_memo(arr, N-1, sum - arr[N-1]) || 
                              subsetSum_memo(arr, N-1, sum)) );
    }
    
    // Most Efficient method, Time = O(N*sum) and Space = O(N*sum)
    int bottomUpDP(int arr[], int N, int sum){
        
        int dp[N+1][sum+1];
        memset(dp, -1, sizeof(dp));
        // Initialization statements first
        for(int i = 0; i <= N; ++i)
            dp[i][0] = 1;
        for(int i = 1; i <= sum; ++i){
            dp[0][i] = 0;
        }
        
        // Now apply Bottom Up DP
        for(int i = 1; i <= N; ++i){
            for(int j = 1; j <= sum; ++j){
                dp[i][j] = dp[i-1][j];
                if( j >= arr[i-1] )
                    dp[i][j] = ( dp[i-1][j - arr[i-1]] || dp[i-1][j]);
            }
        }
        return dp[N][sum];
    }
    
    int equalPartition(int N, int arr[])
    {
        int sum = 0;
        for(int i = 0; i < N; ++i)
            sum += arr[i];
            
        if( sum % 2 != 0 )
            return 0;
        else{
            // Now if we found a value (sum/2) in any of the subset of arr[], then that means
            // the other half (sum/2) would definitely also be present
            
            // Method 1 : Using simple recursion
            // return subsetSum_recur(arr, N, sum/2);
            
            // Method 2 : Using Memoization
            // memset(memo, -1, sizeof(memo));
            // return subsetSum_memo(arr, N, sum/2);
            
            // Method 3 : Using BottomUp DP
            return bottomUpDP(arr, N, sum/2);
        }
    }
};

// { Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int N;
        cin>>N;
        int arr[N];
        for(int i = 0;i < N;i++)
            cin>>arr[i];
        
        Solution ob;
        if(ob.equalPartition(N, arr))
            cout<<"YES\n";
        else
            cout<<"NO\n";
    }
    return 0;
}  // } Driver Code Ends
