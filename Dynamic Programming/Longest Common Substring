// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution{
    public:
    int memo[1001][1001];
    int lcSubstr_recur(string& s1, string& s2, int n, int m, int suffixLen){
        
        if( n ==0 || m == 0 )
            return suffixLen;
        
        if( s1[n-1] == s2[m-1] ){
            suffixLen = lcSubstr_recur(s1, s2, n - 1, m - 1, suffixLen + 1);
        }
        
        suffixLen = max( suffixLen, max( lcSubstr_recur(s1, s2, n - 1, m, 0),
                                         lcSubstr_recur(s1, s2, n, m - 1, 0)) );
                                         
        return suffixLen;
    }
    
    // Top Down Memoization
    int lcSubstr_memo(string& s1, string& s2, int n, int m, int suffixLen){
        
        if( n ==0 || m == 0 )
            return ( memo[n][m] = suffixLen );
        
        if( memo[n][m] != -1 )
            return memo[n][m];
        
        if( s1[n-1] == s2[m-1] ){
            suffixLen = lcSubstr_recur(s1, s2, n - 1, m - 1, suffixLen + 1);
        }
        
        memo[n][m] = max( suffixLen, max( lcSubstr_recur(s1, s2, n - 1, m, 0),
                                         lcSubstr_recur(s1, s2, n, m - 1, 0)) );
                                         
        return memo[n][m];
    }
    
    // Best Method => Bottom Up Tabulation DP, Time = O(n*m) and Space = O(n*m)
    int lcSubstr_bottomUp(string& s1, string& s2, int n, int m){
        
        // Very easy to understand code, directly changed from LCS code
        int dp[n+1][m+1];
        memset(dp, -1, sizeof(dp));
        int maxLen = INT_MIN;
        for(int i = 0; i <= n; ++i){
            for(int j = 0; j <= m; ++j){
                if( i == 0 || j == 0 ){
                    dp[i][j] = 0;
                }
                else if( s1[i-1] == s2[j-1] ){
                    dp[i][j] = 1 + dp[i-1][j-1];
                }
                else{
                    dp[i][j] = 0;
                }
                maxLen = max( maxLen, dp[i][j] );
            }
        }
        return ( maxLen != INT_MIN ) ? maxLen : 0;
    }
    
    int longestCommonSubstr (string& S1, string& S2, int n, int m)
    {
        int temp = 0;
        
        // Method 1 : Using normal recursion (TLE)
        // return lcSubstr_recur(S1, S2, n, m, temp);
        
        // Method 2 : Using Memoization (TLE)
        // memset(memo, -1, sizeof(memo));
        // return lcSubstr_recur(S1, S2, n, m, temp);
        
        // Method 3 : Bottom Up Tabulation DP (Rely only on this)
        return lcSubstr_bottomUp(S1, S2, n, m);
    }
};

// { Driver Code Starts.

int main()
{
    int t; cin >> t;
    while (t--)
    {
        int n, m; cin >> n >> m;
        string s1, s2;
        cin >> s1 >> s2;
        Solution ob;

        cout << ob.longestCommonSubstr (s1, s2, n, m) << endl;
    }
}
// Contributed By: Pranay Bansal
  // } Driver Code Ends
