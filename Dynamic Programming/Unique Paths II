class Solution {
public:
    bool visited[101][101];
    int memo[101][101];
    int R;
    int C;
    
    bool isValid(int r, int c, vector<vector<int>>& obstacleGrid){
        if( r < 0 || r == R || c < 0 || c == C )
            return false;
        if( visited[r][c] || obstacleGrid[r][c] == 1 )
            return false;
        return true;
    }
    
    int pathsWithObstaclesRecur(int r, int c, vector<vector<int>>& obstacleGrid){
        
        visited[r][c] = true;
        if( r == R - 1 && c == C - 1 ){
            visited[r][c] = false;
            return 1;
        }
        
        int right = 0;
        int down = 0;
        if( isValid(r, c + 1, obstacleGrid) )
            right += pathsWithObstaclesRecur(r, c + 1, obstacleGrid);
        
        if( isValid(r + 1, c, obstacleGrid) )
            down += pathsWithObstaclesRecur(r + 1, c, obstacleGrid);
        
        visited[r][c] = false;
        return ( right + down );
    }
    
    int pathsWithObstaclesMemo(int r, int c, vector<vector<int>>& obstacleGrid){
        
        if( memo[r][c] != -1 )
            return memo[r][c];
        
        visited[r][c] = true;
        if( r == R - 1 && c == C - 1 ){
            visited[r][c] = false;
            return ( memo[r][c] = 1 );
        }
        
        if( isValid(r, c + 1, obstacleGrid) ){
            if( memo[r][c + 1] == -1 )
                memo[r][c + 1] = pathsWithObstaclesMemo(r, c + 1, obstacleGrid);
        }
        else
            memo[r][c + 1] = 0;
        
        if( isValid(r + 1, c, obstacleGrid) ){
            if( memo[r + 1][c] == -1 )
                memo[r + 1][c] = pathsWithObstaclesMemo(r + 1, c, obstacleGrid);
        }
        else
            memo[r + 1][c] = 0;
        
        visited[r][c] = false;
        return ( memo[r][c] = memo[r][c + 1] + memo[r + 1][c] );
    }
    
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        
        R = obstacleGrid.size();
        C = obstacleGrid[0].size();
        if( obstacleGrid[0][0] == 1 || obstacleGrid[R - 1][C - 1] == 1 )
            return 0;
        // Method 1 : Using Simple Recursion (gives TLE)
        // return pathsWithObstaclesRecur(0, 0, obstacleGrid);
        
        // Method 2 : Memoization Top-Down
        memset(memo, -1, sizeof(memo));
        memset(visited, 0, sizeof(visited));
        return pathsWithObstaclesMemo(0, 0, obstacleGrid);
    }
};
