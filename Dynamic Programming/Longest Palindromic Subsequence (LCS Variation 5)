class Solution {
public:
    int memo[1001][1001];
    // Recursion
    int lcs_recur(int n, int m, string& s1, string& s2){
        
        if( n == 0 || m == 0 )
            return 0;
        
        if( s1[n-1] == s2[m-1] )
            return ( 1 + lcs_recur(n-1, m-1, s1, s2));
        else
            return max( lcs_recur(n-1, m, s1, s2), lcs_recur(n, m-1, s1, s2) );
        
    }
    
    // Memoization
    int lcs_memo(int n, int m, string& s1, string& s2){
        
        if( n == 0 || m == 0 )
            return memo[n][m] = 0;
        
        if( memo[n][m] != -1 )
            return memo[n][m];
        
        if( s1[n-1] == s2[m-1] )
            return memo[n][m] = ( 1 + lcs_memo(n-1, m-1, s1, s2));
        else
            return memo[n][m] = max( lcs_memo(n-1, m, s1, s2), lcs_memo(n, m-1, s1, s2) );
        
    }
    
    // Time = O(n*m) and Space = O(n*m)
    int lcs_bottomUp(int n, int m, string &a, string &b){
        
        int dp[n+1][m+1];
            
        for(int i = 0; i <= n; ++i){
            for(int j = 0; j <= m; ++j){
                if( i == 0 || j == 0 )
                    dp[i][j] = 0;
                else if( a[i-1] == b[j-1] )
                    dp[i][j] = 1 + dp[i-1][j-1];
                else
                    dp[i][j] = max( dp[i-1][j], dp[i][j-1] );
            }
        }
        
        return dp[n][m];
    }
    
    int longestPalindromeSubseq(string s) {
        string t = s;
        reverse(t.begin(), t.end());
        
        // Method 1 : Using recursion
        // return lcs_recur(s.size(), t.size(), s, t);
        
        // Method 2 : Memoization
        // memset(memo, -1, sizeof(memo));
        // return lcs_memo(s.size(), t.size(), s, t);
        
        // Method 3 : Using Bottom Up DP
        return lcs_bottomUp(s.size(), t.size(), s, t);
    }
};
