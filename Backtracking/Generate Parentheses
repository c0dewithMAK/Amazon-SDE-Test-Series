// { Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;
vector<string> AllParenthesis(int n) ;


 // } Driver Code Ends
//User function Template for C++

// N is the number of pairs of parentheses
// Return list of all combinations of balanced parantheses
class Solution
{
    public:
    
    void recurUtil(int OCR, int CCR, string temp, vector<string>& res){
        
        if( OCR == 0 && CCR == 0 ){
            res.push_back(temp);
            return;
        }
        
        if( OCR > 0 ){
            temp.push_back('(');
            // Keep track of currently opened braces by doing CCR + 1
            // This helps in creating well-formed pattern
            recurUtil( OCR - 1, CCR + 1, temp, res );
            temp.pop_back();
        }
        
        if( CCR > 0 ){
            temp.push_back(')');
            // Now recur for that many opened braces as above i.e., CCR till it becomes 0
            recurUtil( OCR, CCR - 1, temp, res );
            temp.pop_back();
        }
    }
    
    vector<string> AllParenthesis(int n) 
    {
        int OCR = n; // Open Count Remaining for opening braces
        int CCR = 0; // Closed Count Remaining for closing braces
        
        string temp;
        vector<string> res;
        recurUtil(OCR, CCR, temp, res);
        return res;
    }
};

// { Driver Code Starts.


int main() 
{ 
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		Solution ob;
		vector<string> result = ob.AllParenthesis(n); 
		sort(result.begin(),result.end());
		for (int i = 0; i < result.size(); ++i)
			cout<<result[i]<<"\n";
	}
	return 0; 
} 
  // } Driver Code Ends
